(function(d){function h(u){var n=d(this),e=null,m=[],p=null,f=null,c=d.extend({rowSelector:"\x3e li",submenuSelector:"*",submenuDirection:"right",tolerance:75,enter:d.noop,exit:d.noop,activate:d.noop,deactivate:d.noop,exitMenu:d.noop},u),h=function(a){a!=e&&(e&&c.deactivate(e),c.activate(a),e=a)},t=function(a){var b=v();b?f=setTimeout(function(){t(a)},b):h(a)},v=function(){function a(a,b){return(b.y-a.y)/(b.x-a.x)}if(!e||!d(e).is(c.submenuSelector))return 0;var b=n.offset(),f={x:b.left,y:b.top-c.tolerance},
q={x:b.left+n.outerWidth(),y:f.y},h={x:b.left,y:b.top+n.outerHeight()+c.tolerance},r={x:b.left+n.outerWidth(),y:h.y},k=m[m.length-1],g=m[0];if(!k)return 0;g||(g=k);if(g.x<b.left||g.x>r.x||g.y<b.top||g.y>r.y||p&&k.x==p.x&&k.y==p.y)return 0;var l=q,b=r;"left"==c.submenuDirection?(l=h,b=f):"below"==c.submenuDirection?(l=r,b=h):"above"==c.submenuDirection&&(l=f,b=q);f=a(k,l);q=a(k,b);l=a(g,l);g=a(g,b);if(f<l&&q>g)return p=k,300;p=null;return 0};n.mouseleave(function(a){pega.cl&&pega.cl.isTouchAble()&&
a&&a.originalEvent&&a.originalEvent.isATriggeredEvent||(f&&clearTimeout(f),pega.cl.isTouchAble()?setTimeout(function(){!pega.c.menu.isFromTouchEvent&&c.exitMenu(this)&&(e&&c.deactivate(e),e=null);pega.c.menu.isFromTouchEvent=!1},1):(!pega.c.menu.isFromTouchEvent&&c.exitMenu(this)&&(e&&c.deactivate(e),e=null),pega.c.menu.isFromTouchEvent=!1))}).find(c.rowSelector).mouseenter(function(a){pega.cl&&pega.cl.isTouchAble()&&a&&a.originalEvent&&a.originalEvent.isATriggeredEvent||(f&&clearTimeout(f),c.enter(this),
t(this))}).mouseleave(function(a){pega.cl&&pega.cl.isTouchAble()&&a&&a.originalEvent&&a.originalEvent.isATriggeredEvent||c.exit(this)});d(document).mousemove(function(a){m.push({x:a.pageX,y:a.pageY});3<m.length&&m.shift()})}"undefined"==typeof d.fn.menuAim&&(d.fn.menuAim=function(d){this.each(function(){h.call(this,d)});return this})})(jQuery);
(function(p) {
    if (p.c != undefined && typeof(p.c.menu) != "undefined") return;

    "use strict";
    
    var touchable = p.cl.isTouchAble();
    var isOrientationRTL = pega.u.d.isOrientationRTL();
    var deferLoadRequest = null;
    var duplicateIdSequencer = 1;
    var isMobile = false;
    var metadataMap = {};

    if (!p.control) {
        p.c = p.namespace("pega.control");
    } else {
        p.c = pega.control;
    }

    p.c.menu = {
        /**
         * [createMenu description]
         * @param  {string} elementId
         * @param  {JSON Object} data
         * @param  {JSON Object} metadata
         * @return {undefined}
         */

        currentActive: null,

        renderer: function(componentInfo) {
            return p.c.menu.createMenu(null, p.c.menu.constructMetadataObject(componentInfo));
        },

        constructMetadataObject: function(componentInfo) {
            var rawCCObject = componentInfo.pyCell.pyModes[0];
            var returnMetadataObject = {};
            var TEMPLATE_CONSTANTS = pega.ui.TEMPLATE_CONSTANTS;
            
            var contextId = pega.ui.TemplateEngine.getCurrentContext().getID() || "";
            var getWorkId = (pega && pega.ctx && pega.ctx.strPyID) || "";
          /* Check if rawCCObject has one of the expected properties. */
            // old condition before UIComponentConstants changes 'rawCCObject && rawCCObject["pyNavPage"]'
            if (rawCCObject && rawCCObject[TEMPLATE_CONSTANTS.NAVPAGE]) {
                //returnMetadataObject["type"] = rawCCObject["pyMenuType"] || "vertical";
                returnMetadataObject["type"] = rawCCObject[TEMPLATE_CONSTANTS.MENUTYPE] || "vertical";
                //returnMetadataObject["format"] = rawCCObject["pyStyleNameOther"] || "menu-format-standard";
                returnMetadataObject["format"] = rawCCObject[TEMPLATE_CONSTANTS.PYSTYLENAMEOTHER] || "menu-format-standard";
                //returnMetadataObject["isMobile"] = rawCCObject["pyIsMobile"] || "false";
                returnMetadataObject["isMobile"] = rawCCObject[TEMPLATE_CONSTANTS.ISMOBILE] || "false";
                //returnMetadataObject["deferLoad"] = rawCCObject["pyNavigationDeferLoad"] || "false";
                returnMetadataObject["deferLoad"] = rawCCObject[TEMPLATE_CONSTANTS.NAVDEFERLOAD] || "false";
                //returnMetadataObject["enableCache"] = rawCCObject["pyNavigationEnableCache"] || "false";
                returnMetadataObject["enableCache"] = rawCCObject[TEMPLATE_CONSTANTS.NAVCACHE] || "false";
                //returnMetadataObject["navName"] = rawCCObject["pyNavigation"];
                returnMetadataObject["navName"] = rawCCObject[TEMPLATE_CONSTANTS.NAVIGATION];
                //returnMetadataObject["navPage"] = rawCCObject["pyNavPage"];
                var navPageName = rawCCObject[TEMPLATE_CONSTANTS.NAVPAGE];
                if(rawCCObject[TEMPLATE_CONSTANTS.NAVPAGEREF] && !pega.u.d.ServerProxy.isDestinationLocal()) {
                    navPageName = pega.ui.TemplateEngine.getCurrentContext().getDataSource(rawCCObject[TEMPLATE_CONSTANTS.NAVPAGEREF]);
                    navPageName = navPageName.split('.')[0];
                }
                returnMetadataObject["navPage"] = navPageName;
                //returnMetadataObject["usingPage"] = rawCCObject["usingPage"];//bug-292999
                returnMetadataObject["usingPage"] = rawCCObject[TEMPLATE_CONSTANTS.USINGPAGE];
                //returnMetadataObject["menuID"] = "menu-" + rawCCObject["pyNavPage"].replace("pyNavigation", "");
                returnMetadataObject["menuID"] = "menu-" + rawCCObject[TEMPLATE_CONSTANTS.NAVPAGE].replace("pyNavigation", "");
                returnMetadataObject["uniqueMenuId"] = (rawCCObject["pyUniqueMenuID"] + contextId + getWorkId) || "";
            }
            return returnMetadataObject;
        },

        processData: function(elementsList) {
            if (!elementsList || elementsList.length == 0) {
                return [];
            }
            var returnDataArray = [];
            for (var i = 0; i < elementsList.length; i++) {
                var ccListItem = elementsList[i];
                if (ccListItem.pyHidden && (ccListItem.pyHidden === "true" || ccListItem.pyHidden === true)) {
                    continue;
                }
                var newObj = {};
                var metaDataProps = [
                    "pyCaption", "pyAutomationID", "pyToolTip", "pySummary", "pyDeferLoad",
                    "pyBadgeProperty", "pyImageSource", "pySimpleImage",
                    "pyIconProperty", "pyIconStyle", "pyDisabled",
                    "pxEntryHandle", "pyRadio", "pyChecked", "pyIsActiveNavItem","pyExpressionId"
                ];
                $.each(metaDataProps, function(index, prop) {
                    var propVal = ccListItem[prop];
                    if (propVal) {
                        newObj[prop] = propVal;
                    }
                });

                if (ccListItem.pyBadgeFormat) {

                    var badgeClass = ccListItem.pyBadgeFormat.toLowerCase();

                    if (badgeClass == "standard (label for field)") {
                        badgeClass = "dataLabelForRead";
                    } else if (badgeClass == "standard" || badgeClass == "standard (label)") {
                        badgeClass = "dataLabelRead";
                    } else {
                        badgeClass = badgeClass.replace(' ', '_');
                        badgeClass = "dataLabelRead" + " " + badgeClass + "_" + "dataLabelRead";
                    }

                    newObj["badgeClass"] = badgeClass;

                }
                if (ccListItem.pyType) {
                    newObj["separator"] = ((ccListItem.pyType && ccListItem.pyType.toLowerCase() == "separator") ? "true" : "false");
                }
                var behaviors = ccListItem.pyBehaviors;
                /** [BUG-192862 : Menu option with FinishAssignment action does not work] starts */
                var pBehaviorsString = "";
                if (behaviors && behaviors.length > 0) {

                    for (var j = 0; j < behaviors.length; j++) {
                        if (j > 0) {
                            pBehaviorsString += ",";
                        }
                        pBehaviorsString += behaviors[j].pyActionString;
                    }
                    try{
                          newObj["data-click"] = JSON.parse("[" + pBehaviorsString + "]");
                    } catch(err){
                        pBehaviorsString = pBehaviorsString.replace(/[\\]/g, "\\\\");
                        newObj["data-click"] = JSON.parse("[" + pBehaviorsString + "]");
                    }

                }
                /** [BUG-192862 : Menu option with FinishAssignment action does not work] ends */
                newObj.nodes = p.c.menu.processData(ccListItem.pyElements);
                returnDataArray.push(newObj);
            }
            return returnDataArray;
        },

        constructDataObject: function(metadata) {
            var navPage_CT = pega.ui.ClientCache.find(metadata.navPage);
            if (navPage_CT) {
                var navPage_CTRef = navPage_CT;
                navPage_CT = JSON.parse(navPage_CT.getJSON());
                var nodesData = p.c.menu.processData(navPage_CT.pyElements);
                if (nodesData && nodesData.length == 0) {
                    nodesData = [];
                    var topLevelNavPage = navPage_CTRef.getTopLevelPage();
                    var newObj = {};
                    newObj["pyCaption"] = topLevelNavPage.get("pyNoItemsMessage").getValue();
                    nodesData.push(newObj);
                }
                return {
                    menuid: metadata.navPage,
                    menuDesc: (metadata.navPage.indexOf("pyElements") > -1 ? navPage_CT.pyCaption : navPage_CT.pyLabel),
                    nodes: nodesData
                };
            }
            return null;
        },

        createMenu: function(elementId, metadata) {
            var data = p.c.menu.constructDataObject(metadata);
            if (!data) {
                return;
            }
            $.extend(metadata, p.c.menu.getSkinConfig(metadata.format));
            if (metadata.type == "horizontal") {
                metadata.sliding = false;
            }
            /*menubar can never be fullscreen*/
            if (metadata.fullscreen) {
                metadata.fullscreen = false;
            }
            setTimeout(function() {
                if (!metadata.sliding) {
                    p.c.menu.createSubLevels(data, metadata);
                }
            }, 0);

            var menubarMarkup = p.c.menu.createBar(elementId, data, metadata);

            /*Maintain a map of menubar id and sublevels. Used in doMenuBarCleanup*/
            var menubarid = $(menubarMarkup).attr('id');
            menuIdQueue[menubarid] = [];
            $(menubarMarkup).children('li').each(function(name, val) {
                menuIdQueue[menubarid].push($(val).data('childnodesid'));
            });

            if (!elementId) {
                return menubarMarkup;
            } else {
                $(document.getElementById("div-" + elementId)).replaceWith($(menubarMarkup));
            }

        },

        /**
         * [createBar description]
         * @param  {[type]} elementId
         * @param  {[type]} data
         * @param  {[type]} metadata
         * @return {[type]}
         */
        createBar: function(elementId, data, metadata) {

          if (metadata) {
            metadata["touchable"] = touchable;
          }
          if (data.nodes.length) {
                !(data.nodes[0].pyDisabled) && (data.nodes[0].focusable = true);
            }
          /* Call function in case of active when */
          p.c.menu.setActiveIndex(data, metadata);
          var menubar = Handlebars.templates["pzPega_menubar_template"]({
            nodeParent: data,
            nodes: data.nodes,
            metadata: $.extend({
              backLabel: window.gStrBack ? window.gStrBack : "Back"
            }, metadata),
            isMenuBar: true
          });

          metadataMap[metadata.menuID] = metadata;

          return menubar;
        },
      
        cleanSubLevels: function(removedMenuBarElements) {
            for(var i = 0; i < removedMenuBarElements.length; i++) {
                var menuId = removedMenuBarElements[i].id;
                var subLevelItem = document.querySelector("[data-menuid=" + menuId +"]");
                // Remove the menu-panel-wrapper element in the body
                if(subLevelItem) {
                    document.body.removeChild(subLevelItem.parentNode);
                }
            }
        },

        /**
         * [createSublevels description]
         * @param  {[type]} data
         * @param  {[type]} metadata
         * @return {[type]}
         */
        createSubLevels: function(data, metadata) {
          
             var mutate = function (mutations, observer) {
               for(var i = 0; i<mutations.length; i++) {
                 var lenRemovedNodes = mutations[i].removedNodes.length;
                  for(var j = 0; j < lenRemovedNodes; j++) {
                   if(mutations[i].removedNodes[j].querySelectorAll){
                     pega.c.menu.cleanSubLevels(mutations[i].removedNodes[j].querySelectorAll("ul.menu-bar"));
                   }
                 }
              }
            };
            var mutationObserver = new MutationObserver(mutate);
            var targetNode = pega.u.d.getSectionDiv(document.getElementById(metadata.menuID));
            pega.ui.statetracking.setBusy("p.c.menu.createSubLevels")

            var allNodesHTML = "";
            for (var i in data.nodes) {
                allNodesHTML += p.c.menu.createSubLevel(data.nodes[i], metadata);
            }

            if (metadata.sliding) {
                allNodesHTML = "<div class=\"menu-slider " + metadata.format + (isMobile && metadata.fullscreen ? " menu-fullscreen" : " menu-slider-nofullscr") + "\">" + allNodesHTML + "</div>";
            }

            var allNodesObject = $(allNodesHTML);

            // register harness context switching
            if(allNodesObject.length) {                
                pega.ctxmgr.registerContextSwitching(allNodesObject.get(0));
            }
            $(document.body).append(allNodesObject);
            if(metadata.menuID && targetNode){
                mutationObserver.observe(targetNode, {
                childList: true,
                subtree: true
      	      });
            }

            if (!metadata.sliding) {
                p.c.menu.setupMenuAim(allNodesObject.find(".menu"));
            }

            pega.ui.statetracking.setDone()
        },

        /**
         * [createSubLevel description]
         * @param  {[type]} node
         * @param  {[type]} metadata
         * @return {[type]}
         */
        createSubLevel: function(node, metadata) {
            var nodeHTML = "";
            /* BUG-192854: Merging pyCaption in data for sublevels. */
            if (node.nodes) {
                nodeHTML = Handlebars.partials["pzPega_menu_template"]({
                    nodes: node.nodes,
                    metadata: $.extend({
                        headerText: node.menuDesc ? node.menuDesc : ""
                    }, metadata),
                    pxEntryHandle: node.pxEntryHandle ? node.pxEntryHandle : node.menuid,
                    pyCaption: node.pyCaption ? node.pyCaption : ""
                });
            }
            /*BUG-196167 :start*/
            nodeHTML = nodeHTML.replace(/&amp;amp;/gi, "&amp;");
            /*BUG-196167 :end*/
            return nodeHTML;
        },

        /**
         * [setupMenuAim description]
         * @param  {[type]} menuNode
         * @return {[type]}
         */
        setupMenuAim: function(menuNode) {
            $(menuNode).menuAim({
                rowSelector: "> .menu-item",
                activate: function(menuItem) {
                    p.c.menu.getAndShowSubLevel(menuItem);
                },
                deactivate: function(menuItem) {
                    p.c.menu.hideSubLevel(menuItem);
                },
                exitMenu: function() {
                    return true;
                }
            });
        },

        /**
         * [getAndShowSubLevel description]
         * @param  {[type]}  menuItem
         * @return {[type]}
         */
        getAndShowSubLevel: function(menuItem) {
            menuItem = $(menuItem);
            if (!menuItem.hasClass("menu-item-disabled") && !menuItem.parent().hasClass("menu-format-slidingmenu")) {
                p.c.menu.highlight(menuItem);
            }
            var menuBarNode = p.c.menu.getMenuBarNode(menuItem.parent());
            var subMenuLoaded = false;
            var fromMenuBar = menuItem.parent().hasClass("menu-bar");
            if (p.c.menu.showMenuTarget) {
                var config = $.data(p.c.menu.showMenuTarget, "config");
            }
            //var loadSubLevel = menuItem.attr("isdeferload");

            $.data(menuItem.get(0), "hideChildNode", false); //BUG-218045 fix :- hideSubLevel() is called only for ie which causing this bug. Setting the value of "hideChildNode" to false before appending the menu item will solve it.
            if (menuItem.attr("data-childnodesid")) {
                subMenuLoaded = p.c.menu.deferLoadNode(menuItem, menuBarNode, fromMenuBar);
            }
            if (subMenuLoaded) {
                p.c.menu.showSubLevel(menuItem);
            }
        },

        /**
         * [showSubLevel description]
         * @param  {[type]} menuItem
         * @return {[type]}
         */
        showSubLevel: function(menuItem) {
            menuItem = $(menuItem);
            if ($.data(menuItem.get(0), "hideChildNode")) {
                return;
            }
            if (!menuItem.hasClass("menu-item-disabled")) {
                p.c.menu.highlight(menuItem);
            }
            //BUG-195976 - to hide sublevel of other menu items
            var fromMenuBar = menuItem.parent().hasClass("menu-bar");
            if (fromMenuBar) {
                var siblingsMenuItems = menuItem.siblings('li');
                for (var i = 0; i < siblingsMenuItems.length; i++) {
                    var childnodesid = $(siblingsMenuItems[i]).attr("data-childnodesid");
                    if (typeof childnodesid === 'string' && document.getElementById(childnodesid)) {
                        $(document.getElementById(childnodesid)).hide();
                    }
                }
            }
            //BUG-195976 - end
            var subLevelNode = p.c.menu.getChildNode(menuItem);
            var orientation = "vertical";
            var menuBarParent = menuItem.parent();
            if (menuBarParent.hasClass("menu-bar") && menuBarParent.hasClass("menu-horizontal")) {
                orientation = "horizontal";
            }
            p.c.menu.renderNode(subLevelNode, menuItem, orientation);
            p.c.menu.highlight(subLevelNode.children(".menu-item-enabled").first());
        },

        hideNode: function(e) {
            if (p.c.menu.canHide(e)) {  
              var node = e.data.node;
              //If the context manager has unregisterContextSwitching function, unregister the node, as it is getting hidden or removed.
              if(pega.ctxmgr && typeof(pega.ctxmgr.unregisterContextSwitching) === "function" && (node) && (node).length > 0) {
                //Get the menu wrapper of the ul.
                var menuWrapper = (node).closest("div.menu-panel-wrapper[data-harness-id]");
                if(menuWrapper && menuWrapper.length > 0){
                  pega.ctxmgr.unregisterContextSwitching(menuWrapper.get(0));
                }
              }
                p.c.menu.detachNodeListeners(e.data.node);
                if (node.hasClass("menu-fullscreen")) {
                    p.c.menu.animateFullScreen(node, "hide");
                } else {
                    e.data.node.hide();
                    if (e.data.node.hasClass("menu-slider")) {
                        if(pega.u.d.isOrientationRTL()) {
                            e.data.node.children().first().css({
                                marginRight: 0
                            });
                        } else {
                            e.data.node.children().first().css({
                                marginLeft: 0
                            });
                        }
                        e.data.node.find(".menu-slider-item-active").removeClass("menu-slider-item-active");
                        e.data.node.find(".menu-active").removeClass("menu-active");
                    }
                }
              
                if(pega.mobile && pega.mobile.nativenav){
                    pega.mobile.nativenav.restoreCheckpoint(e.data.node.backNavId);
                    e.data.node.backNavId = "";
                }
              
            }                  
        },

        canHide: function(e) {
            var shouldHide = true;
            var userAgentVersion = /Android(?:\D*)([0-9\.]*);/g.exec(navigator.userAgent || '');
            userAgentVersion = userAgentVersion && userAgentVersion[1];
            userAgentVersion = parseFloat(userAgentVersion);
            if (e.data.node.hasClass("menu-fullscreen") && ($(e.target).hasClass("menu-item-separator") || $(e.target).hasClass("menu-fullscreen"))) {
                shouldHide = false;
                $(document.body).on("touchend.bodyone", {
                    node: e.data.node
                }, function(e) {
                        $(this).off(e);
                        p.c.menu.hideNode(e);
                    }
                );
                
            } else if (p.c.menu.dragging && ( !userAgentVersion || userAgentVersion >= 5 )){
                /* Make dragging false only when hideNode is fired for currentActive element. The order in which it is fired is in the order or its registration. */
                shouldHide = false;
                var node = e.data.node;
                //if(e.data.node[0] && e.target && $.contains(e.data.node[0],e.target)) p.c.menu.dragging = false;
                $(document.body).on("touchend.bodyone", {
                    node: e.data.node
                }, function(e) {
                        $(this).off(e);
                        p.c.menu.hideNode(e);
                    }
                );
            }
            return shouldHide;
        },

        renderNode: function(node, target, orientation, event) {
            p.c.menu.positionNode(node, target, orientation, event);

            /*BUG-189438:If the menu is launched from an overlay, create a dummy div so that the overlay doesn't dismiss when a menuitem is clicked*/
            var overlayElem = document.getElementById("_popOversContainer");
            if (overlayElem && $.contains(overlayElem, target) && !$.contains(overlayElem, document.getElementById("menuFromOverlay"))) {
                $(target).after("<div style='display:none' id='menuFromOverlay'></div>");
            }

            /*If showmenu is configured on a button in a modal, add a class so cleanup can be done after modal dismiss.*/
            if (pega && pega.u && pega.u.d && pega.u.d.modalDialog) {
                var modalElement = pega.u.d.modalDialog.body;
                if (modalElement && $.contains(modalElement, target)) {
                    //BUG-226121 : sliding menu check adding class to menu wrapping div
                    if (node.hasClass('menu-slider')) {
                        node.addClass("menu-in-modal");
                    } else {
                        node.parent().addClass("menu-in-modal");
                    }
                }
            }

            if (!$(target).hasClass("menu-item")) {
                //Native navigation
                if(pega.mobile && pega.mobile.nativenav){
                    node.backNavId = pega.mobile.nativenav.addAsCheckPoint(this.hideNode, this, {data:{node:node}});
                }
           
                $(document.body).on("click.bodyone contextmenu.bodyone", {
                    node: node
                }, function(e){
                        $(this).off(e);
                        p.c.menu.hideNode(e);
                    }
                );
                
                /*BUG-338460: Hide all open menus when browser forward or backward is clicked. */
                $(window).on("popstate", {
                    node: node
                }, function(e) {
                        $(this).off(e);
                        p.c.menu.hideNode(e);
                    }
                );
               
               $(document.body).on("touchend.bodyone", {
                    node: node
                }, function(e) {
                        $(this).off(e);
                        p.c.menu.hideNode(e);
                    }
                );
                
                if (!node.hasClass("menu-fullscreen")) {
                    var tempNode = node;
                    if (tempNode.hasClass("menu-slider")) {
                        tempNode = node.children().first();
                    }
                    p.c.menu.highlight(tempNode.children(".menu-item-enabled").first());
                }
            }
            if (node.attr("id") || (node.hasClass("menu-slider") && node.children(0).attr("id"))) {
                var nodeId = null;
                if (node.hasClass("menu-slider")) {
                    nodeId = node.children(0).attr("id");
                } else {
                    nodeId = node.attr("id");
                }
                if (!node.hasClass("menu-fullscreen")) {
                    $(window).on("resize." + nodeId.replace(/\$/ig, "_"), {
                        node: node,
                        target: target,
                        orientation: orientation
                    }, p.c.menu._positionNode);
                    //$(window).add("#PEGA_HARNESS, #HARNESS_CONTENT").on("scroll." + nodeId.replace(/\$/ig, "_"), {node: node, target: target, orientation: orientation}, p.c.menu._positionNode);
                    $(window).on("mousedown." + nodeId.replace(/\$/ig, "_"), {
                        node: node,
                        target: target,
                        orientation: orientation,
                        nodeId: nodeId
                    }, p.c.menu._handleMouseDown);
                    $(window).on("mousewheel wheel", {
                        node: node, 
                        target: target, 
                        orientation: orientation
                    } , function(e){
                            $(this).off(e);
                            p.c.menu._positionNode(e);
                        }
                    );
                    // TODO: Off
                    $(node).on("mousewheel." + nodeId.replace(/\$/ig, "_"), {
                        node: node,
                        target: target,
                        orientation: orientation
                    }, p.c.menu._positionNode);
                    //Dismiss menu on touchmove outside menu
                    //if (event && event.type == "touchend") {
                        $(window).on("touchmove", {
                            node: node,
                            target: target,
                            orientation: orientation
                        }, p.c.menu._positionNode);
                        // TODO: Off
                        $(node).on("touchmove", p.c.menu.handleTouchMove);
                        $(node).on("touchmove." + nodeId.replace(/\$/ig, "_"), {
                            node: node,
                            target: target,
                            orientation: orientation
                        }, p.c.menu._positionNode);
                    //}
                    //$(window).on("orientationchange." + node.attr("id").replace(/\$/ig, "_"), {node: node, target: target, orientation: orientation}, p.c.menu._positionNode);
                }
            }
        },

        _handleMouseDown: function(e) {
            if (e.target && e.data.nodeId && !$(e.target).hasClass("menu") && !$(e.target).hasClass("menu-slider")) { //Do not close if the scroll is in the menu
                $(e.target).on("scroll." + e.data.nodeId.replace(/\$/ig, "_"), {
                    node: e.data.node,
                    target: e.data.target,
                    orientation: e.data.orientation
                }, function(e) {
                        $(this).off(e);
                        p.c.menu._positionNode(e);
                    }
                );
            }
        },

        _positionNode: function(e) {
            if (e.originalEvent && e.originalEvent.menuMove == true)
                return;
            if (e.type == "scroll" || e.type == "mousewheel" || e.type == "touchmove" || e.type == "wheel") {
                if ($(e.currentTarget).hasClass("menu")) { // Do not hide if the wheel is moved when on menu
                    if (!(e.type == "touchmove")) //
                        e.stopImmediatePropagation(); // Also don't let event get to body.
                    else {
                        /* Reverting changes made for BUG-195704 (below) as it is acceptable for the page to scroll once the last item of the menu is reached.
                        //BUG-195704 : start , stop scrolling of background when moving the sub menus.
                        if(e.type == "touchmove" ){
                          e.preventDefault();
                        }
                        //BUG-195704 : end
                        */
                        if(e.originalEvent){
                            e.originalEvent.menuMove = true;
                        }
                    }
                } else if (pega.c.menu.dragging) {
                    if(e.originalEvent){
                        e.originalEvent.menuMove = true;
                    }
                    return;
                } else {
                    e.data.node.hide();
                }
            }

            if ($(e.data.node).get(0).offsetHeight > 0) {
                if ($(e.data.target).get(0).offsetHeight == 0) {
                    e.data.node.hide();
                    p.c.menu.detachNodeListeners(e.data.node);
                    return;
                }
                if (touchable) {
                    $(e.data.node).css({
                        top: 0,
                        left: 0
                    });
                }
                /*Donot reposition fullscreen menus*/
                if ((e.type == "resize" || e.type == "scroll") && !e.data.node.hasClass("menu-fullscreen")) {
                    if (!e.data.node.hasClass("menu-slider")) {
                        p.c.menu.positionNode(e.data.node.css("max-height", ""), e.data.target, e.data.orientation);
                    } else {
                        p.c.menu.positionNode(e.data.node, e.data.target, e.data.orientation);
                    }
                }
            } else {
                p.c.menu.detachNodeListeners(e.data.node);
            }
        },

        positionNode: function(node, target, orientation, event) {
            if (!p.c.menu.isElementInViewport(target)) {
                node.hide();
            } else if (node.length) {
                var subMenuAlignment = $.data($(node).get(0), "sub_menu_alignment"),
                    myPos = (subMenuAlignment == "right" ? "right top" : (isOrientationRTL && orientation == "vertical") ? "right top" : "left top"),
                    atPos = (subMenuAlignment == "right" ? "right bottom" : "left bottom"),
                    windowHeight = $(window).height(),
                    nodeParent = node.parent(),
                    maxHeight = (windowHeight <= (node.height() + 2)) ? (windowHeight + "px") : ""; //'+2' is the buffer while resizing.

                if (touchable) {
                    //BUG-359213 : preventing to add top style of the element is BODY
                    if(node.parent().length ==1 && node.parent()[0].tagName !== 'BODY'){
                      node.parent().css("top", "-999px");
                    }
                    maxHeight = windowHeight + "px";
                }

                node.show();
                if (node.hasClass("menu-fullscreen")) {
                    p.c.menu.animateFullScreen(node, "show");
                    return;
                }
                // If target element is an SVG element, position using the event's pageX and pageY values
                // Note that collision detection and other advanced positioning functionality will not work in this case
                if(target instanceof SVGElement) {
                  event && (node.parent().hasClass("menu-panel-wrapper") ? node.parent() : node).css({
                      top: event.pageY,
                      left: event.pageX
                  });
                } else {
                  (node.parent().hasClass("menu-panel-wrapper") ? node.parent() : node).position({
                      my: myPos,
                      at: (orientation == "horizontal" ? atPos : (isOrientationRTL) ? "left top" : "right top"),
                      of: target,
                      collision: "flipfit flipfit",
                      using: pega.c.menu.positionUsingFunc
                  });
                }
              /*
              BUG-576752: menu is not visible properly.
              When the node's height exceeds the windows height, set the top to 0
              and max-height to take window's innerHeight. 
              */
              if(node.parent().height() > windowHeight) {
                maxHeight = windowHeight - 25 + "px";
                node.parent().css("top", "0");
              }
                node.css('max-height', maxHeight);
            }
        },

      
  positionUsingFunc: function(event, ui) {
            if (!$(this).hasClass("menu-slider")) {
                var targetEl = ui.target.element.parent();

                if (targetEl.is("ul") && event.left > 0 && targetEl.get(0).scrollHeight > targetEl.height() + parseInt(targetEl.css('padding-top')) + parseInt(targetEl.css('padding-bottom')) + 2) { //'+2' is the buffer while resizing.
                    /*var borderWidth = parseInt(getComputedStyle(targetEl.get(0)).borderLeftWidth) + parseInt(getComputedStyle(targetEl.get(0)).borderRightWidth),*/
                    /*BUG-200931 : added to call p.c.menu.getComputedStyle if browser native getComputedStyles not available - starts*/
                    var borderWidth = parseInt(getComputedStyle(targetEl.get(0)).borderLeftWidth) + parseInt(getComputedStyle(targetEl.get(0)).borderRightWidth);
                   //removed BUG-200931 fix as fix was applicable for IE8
                    /*BUG-200931 : added to call p.c.menu.getComputedStyle if browser native getComputedStyles not available - ends*/
                   var parentMenu = targetEl[0].parentNode;
                  var shift = 0;
                  if(parentMenu){
                        var submenuPosition = parentMenu.offsetWidth + parentMenu.offsetLeft;
                        var availabeSpace = document.body.scrollWidth - submenuPosition;
                        
                        if(this.offsetWidth > availabeSpace){
                              shift = this.scrollWidth - availabeSpace + 5;
                        }
                    }
                    var scrollBarWidth = (targetEl.get(0).offsetWidth - targetEl.get(0).clientWidth) - borderWidth;
                   $(this).css("borderLeft", scrollBarWidth + "px solid transparent");
                    $(this).css("left", event.left - shift );
                } else {
                  
                    $(this).css("left", event.left);
                }
                if(event.top < 0 && Math.ceil((event.top*-1 - targetEl.parent().offset().top)) > 0){
                  event.top += (event.top*-1 - targetEl.parent().offset().top);
                }
                $(this).css("top", event.top);
            } else {
                $(this).css("left", event.left);
                $(this).css("top", event.top);
            }
        },

        animateFullScreen: function(node, state) {
            /*if(pega.util.Event.isIE && pega.util.Event.isIE<=9){
                if(state == "hide")
                    node.hide();
                return;
            }*/
            if (state == "show") {
                node.addClass("fullscreen-slideup");
                $(node).on(p.c.menu.getCrossBrowserAnimEvent("AnimationEnd"), function(e) {
                    $(this).off(e);
                    $(e.target).removeClass("fullscreen-slideup");
                });
            } else if (state == "hide") {
                if (node.get(0).style.display == "none") {
                    return;
                }
                node.addClass("fullscreen-slidedown");
                $(node).on(p.c.menu.getCrossBrowserAnimEvent("AnimationEnd"), function(e) {
                    $(this).off(e);
                    var node = $(e.target);
                    node.removeClass("fullscreen-slidedown");
                    node.hide();
                    if (node.hasClass("menu-slider")) {
                        node.children().first().css({
                            marginLeft: 0
                        });
                        node.find(".menu-slider-item-active").removeClass("menu-slider-item-active");
                        node.find(".menu-active").removeClass("menu-active");
                    }
                });
            }
        },

        getCrossBrowserAnimEvent: function(type) {
            if (pega && pega.env && pega.env.ua && pega.env.ua.webkit) {
                return "webkit" + type;
            } else if (pega && pega.env && pega.env.ua && pega.env.ua.opera) {
                return "o" + type;
            } else {
                return type.toLowerCase();
            }
        },

        detachNodeListeners: function(node) {
            var nodeId = null;
            if (node.hasClass("menu-slider")) {
                nodeId = node.children(0).attr("id");
            } else {
                nodeId = node.attr("id");
            }
            if (nodeId) {
                $(window).off("." + nodeId.replace(/\$/ig, "_"));
            }
        },

        /*This API is given for BUG-189292. Please striclty use other alternatives if possible as this API uses jQuery.closest() function which traverses up the DOM tree and might traverse upto the body if the intended element is not found.*/
        isInMenu: function(element) {
            return $(element).closest(".menu-item").length > 0;
        },

        /**
         * [isElementInViewport description]
         * @param  {[type]} element
         * @return {[boolean]}
         */
        isElementInViewport: function(element) {
            if (element instanceof jQuery) {
                element = element[0];
            }
            var rect = element.getBoundingClientRect();

            return (
                rect.top < $(window).height() &&
                rect.left < $(window).width() &&
                rect.bottom > 0 &&
                rect.right > 0
            );
        },

        /**
         * [hideSubLevel description]
         * @param  {[type]} menuItem
         * @return {[type]}
         */
        hideSubLevel: function(menuItem) {
            menuItem = $(menuItem);
            if(pega.u.automation && pega.u.automation.recorder && pega.u.automation.recorder.isRecording() && (menuItem.attr("data-recording") || menuItem.find('[data-recording]').length > 0)) {
                return;
            }
            //If the context manager has unregisterContextSwitching function, unregister the subMenu as it is getting hidden.
            if(pega.ctxmgr && typeof(pega.ctxmgr.unregisterContextSwitching) === "function" && menuItem.length > 0) {
                //Get the subMenu
                var subMenu = (menuItem.get(0)).querySelector("div.menu-panel-wrapper[data-harness-id]");
                if(subMenu){
                  pega.ctxmgr.unregisterContextSwitching(subMenu);
                }
            }
            /* Why menu-item-active is removed from parent menu */
            /* menuItem.removeClass("menu-item-active");*/
            menuItem.removeClass("menu-loading");
            var menuItemChildNode = p.c.menu.getChildNode(menuItem);
            $.data(menuItem.get(0), "hideChildNode", true);
            menuItemChildNode.hide();
            if (menuItemChildNode.attr("id")) {
                $(window).off("." + menuItemChildNode.attr("id").replace(/\$/ig, "_"));
            }
          
        },

        hideSubLevels: function(node) {
            var ele = $(node).find(".menu-item-active").addBack();
            $.each(ele, function() {
                if (p.c.menu.isMenuBar(this)) {
                    p.c.menu.hideSubLevel(this);
                    var childNode = p.c.menu.getChildNode(this);
                    p.c.menu.hideSubLevels(childNode);
                } else {
                    $(this).find('.menu-item-active').each(function() {
                        p.c.menu.hideSubLevel(this);
                    });
                }
            });
            $(node).find(".menu:visible").each(function() {
                $(this).hide().find(".menu-item-active").removeClass("menu-item-active").removeClass("menu-loading");
                if ($(this).attr("id")) {
                    $(window).off("." + $(this).attr("id").replace(/\$/ig, "_"));
                }
            });
        },

        /**
         * [trimData description]
         * @param  {[type]} data [description]
         * @return {[type]}      [description]
         */
        trimData: function(data) {
            if (data.nodes && data.nodes.length == 1 && data.nodes[0].nodes && data.nodes[0].nodes.length > 0) {
                data.nodes = data.nodes[0].nodes ? data.nodes[0].nodes : data.nodes;
            }
            return data;
        },

        showContextMenu: function(config, target, event) {
            /*
                Set the showMenuTarget to override the events target in case of action executed on a menu item.
                This is to execute the action in the context of the section.
            */
            p.c.menu.showMenuTarget = target;
            var deferLoadNodes = $.data(p.c.menu.showMenuTarget, "deferLoadNodes");
            if (deferLoadNodes) {
                for (var i = 0; i < deferLoadNodes.length; i++) {
                    $(deferLoadNodes[i]).remove();
                }
            }
            isMobile = config.isMobile === "true" || config.isMobile === true;
            var menuid = $(target).attr("data-menuid");
            var previousConfig = $(p.c.menu.showMenuTarget).data("config");
            /*if(previousConfig && previousConfig.idSuffix && menuid && config.loadBehavior == "firstuse") {
                config.idSuffix = previousConfig.idSuffix;
            }*/
            if (!previousConfig) {
                $.data(p.c.menu.showMenuTarget, "config", config);
            }

            var skinConfig = p.c.menu.getSkinConfig(config.format);
            if (isMobile && skinConfig.fullscreen) {
                skinConfig.sliding = true;
            } else {
                skinConfig.fullscreen = false;
            }
            var nodeToRender = $("#" + menuid);
            if (skinConfig.sliding) {
                nodeToRender = nodeToRender.parent();
            }
            if (menuid && (config.loadBehavior == "firstuse" || config.loadBehavior == "screenload")) {
                p.c.menu.renderNode(nodeToRender, target, "horizontal", event);
                return;
            } else {
                if (!menuid) { /*get the menuid from the metadata's navpagename if the data-menuid on target is gone.*/
                    menuid = config.navPageName;
                    nodeToRender = $("#" + menuid);
                    if (skinConfig.sliding) {
                        nodeToRender = nodeToRender.parent();
                    }
                }
                /* Remove the created menu in case of refresh on display. */
                if (nodeToRender.parent().hasClass("menu-panel-wrapper")) {
                    nodeToRender.parent().remove();
                } else {
                    nodeToRender.remove();
                }
            }

            if (config.loadBehavior == "screenload") {
                /*Screen Load case the control no longer has a special attr. the navpage name comes from action JSON*/
                var navPageName = config.navPageName || $(target).attr("data-menu-nav-page");
                var JSONData = p.c.menu.constructDataObject({
                    navPage: navPageName,
                    navName: config.navName
                });
                p.c.menu.createAndRenderContextMenu(JSONData, config, target, event);
                return;
            }

            /* Make AJAX request in case of refresh on display. */
            var strUrlSF = SafeURL_createFromURL(pega.u.d.url);
            strUrlSF.put("pyActivity", "pzGetMenu");
            strUrlSF.put("navName", config.dataSource);
            /*BUG-216299:Setting the pzKeepPageMessages to true to persist the error message when a menu is opened */
            strUrlSF.put("pzKeepPageMessages", "true");
            if (config.navPage) {
                strUrlSF.put("navPageName", config.navPage);
                config.idSuffix = "_" + duplicateIdSequencer++;
            }
           /*US-121032 removing the clipboard pages, if the menu is not defer loaded*/
            strUrlSF.put("removePage", config.isNavNLDeferLoaded === "false" ? true : false);
            //strUrlSF.put("removePage", false);
            if(config.isTemplatizedGrid){
              strUrlSF.put("isTemplatizedGrid", config.isTemplatizedGrid);
            }
            if(config.UITemplatingStatus ){
              strUrlSF.put("UITemplatingStatus", "Y");
            }
            if (config.ContextPage) {
                strUrlSF.put("ContextPage", config.ContextPage);
            }
            if (config.deferLoad) {
                strUrlSF.put("bDeferLoad", config.deferLoad);
            }

            if (config.pzPrimaryPageName) {
                strUrlSF.put("pzPrimaryPageName", config.pzPrimaryPageName);
            }
            strUrlSF.put("showmenucall", "true");
            if (config.navPageName) {
                strUrlSF.put("navPageName", config.navPageName);
            }
            var callback = {
                success: function(response) {
                    var JSONData = null;
                    try {
                      /*BUG-292121: replaced pega.u.d.isHybridClient with pega.offline */
                        if(pega.u.d.ServerProxy.isDestinationLocal()) {
                          JSONData = p.c.menu.constructDataObject({
                                navPage: config.navPageName
                            }); //, navName: JSONData.menuDesc});
                        } else {
                            /* Added below code to extract skeleton and pass over JSON to generate Contect Menu EPIC-30602 - Start */
                            if(response.responseText){                              
                              if(response.responseText.indexOf("class=\"skeleton\"") > 0){
                                var startIndexForSkeletonMarkup = response.responseText.indexOf("<div");
                                if(startIndexForSkeletonMarkup>0){
                                  var skeletonMarkup = response.responseText.substring(startIndexForSkeletonMarkup-4);
                                  var nodeToInsert = document.createElement("DIV");
                                  nodeToInsert.innerHTML = skeletonMarkup;
                                  var elementNode = nodeToInsert.getElementsByClassName("skeleton");
                                  if(elementNode && elementNode.length>0){
                                    var elementToInsert = "";
                                    for (var i = 0; i < elementNode.length; i++){
                                      if(!document.getElementById(elementNode[i].id))
                                        elementToInsert += elementNode[i].outerHTML;
                                    }
                                    response.responseText = response.responseText.substring(0, startIndexForSkeletonMarkup-4).trim();
                                    $('body').append(elementToInsert);
                                    elementToInsert = null;
                                  }
                                }
                              }                                                          
                            }
                            /* Added below code to extract skeleton and pass over JSON to generate Contect Menu EPIC-30602 - End */
                            JSONData = JSON.parse(response.responseText);
                        }
                    } catch (e) {
                        if (console) {
                            console.log("Exception in parsing JSON");
                        }
                        return;
                    }
                    p.c.menu.createAndRenderContextMenu(JSONData, config, target, event);
                    deferLoadRequest = null;
                },
                failure: function(response) {
                    var posObj = {
                        x: pega.util.Event.getPageX(event),
                        y: pega.util.Event.getPageY(event),
                        relativeElement: target,
                        align: config.menuAlign,
                        pyFormat: config.format,
                        maxChars: config.ellipsisAfter,
                        usingPage: config.usingPage
                    };
                    pega.u.contextMenu.renderContextMenu(posObj, config.dataSource, config.className, event);
                },
              isJSONTypeResponse: true

            };
          
            pega.u.d.ServerProxy.doAction(strUrlSF, null, {
                online: function() {
                    deferLoadRequest = pega.u.d.asyncRequest("POST", strUrlSF, callback);
                },
                offline: function() {
                    //callback.success();
                }
            });
        },

        /**
         * [createAndRenderContextMenu description]
         * @param  {[type]} JSONData
         * @param  {[type]} config
         * @param  {[type]} target
         * @return {[type]}
         */
        createAndRenderContextMenu: function(JSONData, config, target, event) {
            JSONData = p.c.menu.trimData(JSONData);
            if (JSONData.nodes && JSONData.nodes.length > 0) {

                if (pega.mobile && pega.mobile.sdk && pmcRuntimeFeatures.pxUsesActionSheets) {
                    p.c.menu.createAndRenderMobileActionSheet(JSONData.nodes, target);
                    return;
                }

                var metadata = {
                    format: config.format,
                    maxWidth: config.ellipsisAfter,
                    idSuffix: config.idSuffix
                };

                var skinConfig = p.c.menu.getSkinConfig(config.format);
                if (isMobile && skinConfig.fullscreen) {
                    skinConfig.sliding = true;
                } else {
                    skinConfig.fullscreen = false;
                }
                $.extend(metadata, skinConfig);

                p.c.menu.createSubLevels({
                    nodes: [JSONData]
                }, $.extend({
                    contextMenuFirstLevel: true
                }, metadata));
                $.data($("#" + JSONData.menuid).get(0), "sub_menu_alignment", config.menuAlign);
                var nodeToRender = $("#" + JSONData.menuid);
                if (metadata.sliding) {
                    nodeToRender = nodeToRender.parent();
                }
                p.c.menu.renderNode(nodeToRender, target, "horizontal", event);
                $(target).attr("data-menuid", JSONData.menuid);
            }
            //removed BUG-173747 Fix as it was applicable for IE8.
        },

        /**
         * [createAndRenderMobileActionSheet description]
         * @param  {[type]} nodes
         * @return {[type]}
         */
        createAndRenderMobileActionSheet: function(nodes, target) {
            var menuItems = nodes.filter(function(node) {
                return node.separator !== "true";
            }).map(function(node) {
                return {
                    "title": node.pyCaption,
                    "userInfo": {
                        "actionString": JSON.stringify(node["data-click"]),
                        "nodes": node.nodes
                    }
                }
            });
            pega.mobile.sdk.ui.showActionSheet(menuItems).then(function(selectedUserInfo) {
                if (selectedUserInfo.nodes && selectedUserInfo.nodes.length > 0) {
                    p.c.menu.createAndRenderMobileActionSheet(selectedUserInfo.nodes, target);
                    return;
                }
                if (selectedUserInfo.actionString) {
                    var eventSource = document.createElement('a');
                    eventSource.style.display = 'none';
                    eventSource.setAttribute('data-click', selectedUserInfo.actionString);
                    eventSource.setAttribute('href', '#');
                    target.appendChild(eventSource);
                    eventSource.click();
                }
            }).catch(function(error){ 
              if (error) console.log(error.message)
            });
        },

        /**
         * [deferLoadNode description]
         * @param  {[type]}  menuItem
         * @param  {[type]}  menuBarNode
         * @return {[type]}
         */
        deferLoadNode: function(menuItem, menuBarNode, fromMenuBar) {

            var metadata = null;
            if (menuBarNode && menuBarNode.get(0)) {
                metadata = metadataMap[$(menuBarNode).attr("id")];
            } else {
                metadata = $.data(p.c.menu.showMenuTarget, "config");
                /*START: BUG-192854*/
                $.extend(metadata, p.c.menu.getSkinConfig(metadata.format));
                if (isMobile && metadata.fullscreen) {
                    metadata.sliding = true;
                } else {
                    metadata.fullscreen = false;
                }
                /* END: BUG-192854 */
            }


            /* metadata is not set on the node if it is not defer loaded. */
            if (!metadata) {
                return true;
            }
            //added standard check for offline case
            if (pega.u.d.ServerProxy && pega.u.d.ServerProxy.isDestinationLocal()) {
                return metadata.sliding ? false : true;
            }

            var bNodeDefer = menuItem.attr("isdeferload") == "true" ? true : false;
            var bPrivDeferLoad = p.c.menu.isPrevDeferLoad(menuItem, menuBarNode);
            var subLevelNode = $(p.c.menu.getChildNode(menuItem));

            if (subLevelNode.get(0)) {
                if (!bPrivDeferLoad && bNodeDefer) {
                    if (subLevelNode.parent().hasClass("menu-panel-wrapper")) {
                        subLevelNode.parent().remove();
                    } else {
                        subLevelNode.remove();
                    }
                } else {
                    return metadata.sliding ? false : true;
                }
            }


            menuItem.addClass("menu-loading");

            var strUrlSF = SafeURL_createFromURL(pega.u.d.url);
            strUrlSF.put("pyActivity", "pzGetMenu");
            if (metadata.navName || metadata.dataSource) {
                strUrlSF.put("navName", metadata.navName || metadata.dataSource);
            }
            if (metadata.navPage || metadata.navPageName) {
                strUrlSF.put("navPageName", metadata.navPage || metadata.navPageName);
            }
            if (metadata.ContextPage) {
                strUrlSF.put("ContextPage", metadata.ContextPage);
            }
            strUrlSF.put("removePage", false);
            if (!(menuBarNode && menuBarNode.get(0))) {
                strUrlSF.put("showmenucall", "true");
            }

            strUrlSF.put(bNodeDefer ? "bNodeDeferLoad" : "bDeferLoad", true);

            if (metadata.usingPage || metadata.pzPrimaryPageName) {
                strUrlSF.put("pzPrimaryPageName", metadata.usingPage || metadata.pzPrimaryPageName);
            }
            var handle = menuItem.attr("data-childnodesid");
            if (handle.lastIndexOf("_") != -1) {
                handle = handle.substring(0, handle.lastIndexOf("_"));
            }
            strUrlSF.put("navEntryHandle", pega.ui.property.toReference(handle));

            var callback = {
                success: function(responseObj) {
                    
                    if(responseObj && responseObj.responseText && responseObj.responseText.trim().indexOf("<div template-scripts>") == 0) {
                        var respNode = responseObj.responseText;
                        var div = document.createElement('div');
                        div.innerHTML = respNode;
                        pega.u.d.extractTemplateScripts(div, function(){});
                    }
                    
                    
                    //var origSubLevelData = JSON.parse(responseObj.responseText);
                    var subLevelData;
                    try {
                       if (pega.u.d.ServerProxy.isDestinationLocal() || (menuBarNode && menuBarNode.get(0))) {
                            subLevelData = p.c.menu.constructDataObject({
                                navPage: handle
                            }); //, navName: origSubLevelData.menuDesc});
                        } else {
                            subLevelData = JSON.parse(responseObj.responseText);
                            if (subLevelData.nodes.length == 0) {
                                //var topLevelNavPage = pega.ui.ClientCache.find(metadata.navPageName);
                                //var topLevelNavPage = navPage.getTopLevelPage();
                                var newObj = {};
                                newObj["pyCaption"] = subLevelData.menuNoItemsMessage;
                                subLevelData.nodes.push(newObj);
                            }
                        }
                    } catch (ex) {
                        if (console) {
                            console.log("Exception in parsing JSON");
                        }
                        return;
                    }

                    subLevelData.pxEntryHandle = handle;
                    subLevelData.pyCaption = subLevelData.pyCaption || subLevelData.menuDesc;

                    var nodeObject = $(p.c.menu.createSubLevel(subLevelData, metadata.sliding ? $.extend({
                        parentHeader: subLevelData.pyCaption
                    }, metadata) : metadata));
                    nodeObject = $(nodeObject);

                    // register harness context switching
                    if(nodeObject.length) {
                        pega.ctxmgr.registerContextSwitching(nodeObject.get(0));
                    }

                    $(metadata.sliding ? menuItem : (fromMenuBar ? document.body : menuItem)).append(nodeObject);

                    if (menuBarNode && menuBarNode.get(0)) {
                        if (bNodeDefer) {
                            var deferLoadNodes = $.data(menuBarNode.get(0), "deferLoadNodes");
                            if (!deferLoadNodes) {
                                deferLoadNodes = $.data(menuBarNode.get(0), "deferLoadNodes", []);
                            }
                            deferLoadNodes.push(nodeObject);
                        }
                    } else { //showmenu defer load nodes references to be deleted once menu hides
                        var deferLoadNodes = $.data(p.c.menu.showMenuTarget, "deferLoadNodes");
                        if (!deferLoadNodes) {
                            deferLoadNodes = $.data(p.c.menu.showMenuTarget, "deferLoadNodes", []);
                        }
                        deferLoadNodes.push(nodeObject);
                    }

                    deferLoadRequest = null;

                    if (!metadata.sliding) {
                        p.c.menu.setupMenuAim(nodeObject.hasClass("menu-panel-wrapper") ? nodeObject.find(".menu") : nodeObject.parent().find(".menu"));
                        p.c.menu.showSubLevel(menuItem);
                    } else {
                        p.c.menu.slideToNextLevel(menuItem);
                        p.c.menu.positionFullscreenMenuSlide(menuItem);
                        try {
                            //nodeObject.children().first().children(".menu-item-anchor").focus();
                        } catch (ex) {}
                    }

                    menuItem.removeClass("menu-loading");

                    return true;

                }
            };

            pega.u.d.ServerProxy.doAction(strUrlSF, null, {
                online: function() {
                    deferLoadRequest = pega.u.d.asyncRequest("POST", strUrlSF, callback);
                },
                offline: function() {
                    //callback.success();
                }
            });
            return false;
        },

        isPrevDeferLoad: function(menuItem, menuBarNode) {
            var deferLoadNodes;
            var childNodeId = menuItem.attr("data-childnodesid");
            if (menuBarNode && menuBarNode.get(0)) {
                deferLoadNodes = $.data(menuBarNode.get(0), "deferLoadNodes");
            } else {
                deferLoadNodes = $.data(p.c.menu.showMenuTarget, "deferLoadNodes");
            }
            if (deferLoadNodes) {
                for (var i = 0; i < deferLoadNodes.length; i++) {
                    if ($(deferLoadNodes[i]).children().attr("id") == childNodeId) {
                        return true;
                    }
                }
            } else {
                return false;
            }
        },

        /**
         * [getMenuBarNode description]
         * @param  {[type]} node
         * @return {[type]}
         */
        getMenuBarNode: function(node) {
            if (node.hasClass("menu-bar")) {
                return node;
            } else {
                return $(document.getElementById(node.attr("data-menuid")));
            }
        },

        /**
         * [getChildNode description]
         * @param  {[type]} menuItem
         * @return {[type]}
         */
        getChildNode: function(menuItem) {
            var childNode = $(menuItem).find("[id='" + $(menuItem).attr("data-childnodesid") + "']");
            if (childNode.length > 0) {
                return childNode;
            }
            return $(document.getElementById($(menuItem).attr("data-childnodesid")));
        },
         /*BUG-219504 bug fix*/
         handleVerticalMenuItemClick: function(e) {
           if($(e.target).parents('.menu-vertical').length>0)
            {
               $(".menu-format-slidingmenu [id^='pyNavigation']").each(function(){
                 $(this).parent().css("display","none");
             }); 
              
              $(".menu-horizontal .menu-item-active").each(function(){
                 var childAttr=$(this).attr("data-childnodesid")
                 if(childAttr){
                  document.getElementById(childAttr).style.display = 'none';
                 }
                /* Why menu-item-active is removed from horizontal menu when vertical menu is clicked */
                 /* $(this).removeClass("menu-item-active"); */
             });
              var menuItem = $(e.target).closest('.menu-item');
              p.c.menu.setState(menuItem,false);
          }
        },
         /*BUG-219504 bug fix end*/

        /**
         * [handleMenuBarItemClick description]
         * @param  {[type]} e
         * @return {[type]}
         */
        handleMenuBarItemClick: function(e) {
            var menuItem = $(this).parent();
            p.c.menu.hideSubLevels(menuItem.parent());
            /*
                The timeout is to handle cases of double clicking on the same menu item.
                The previously attached handler to hide always executes and there seems to be no OOTB JQuery way to remove it for the same event.
                Will revisit later and see if timeout can be avoided.
            */
            var menuBarNode = p.c.menu.getMenuBarNode(menuItem.parent());
            menuBarNode = $(menuBarNode.get(0)).parent();
            var deferLoadNodes = $.data(menuBarNode.get(0), "deferLoadNodes");
            if (deferLoadNodes) {
                for (var i = 0; i < deferLoadNodes.length; i++) {
                    $(deferLoadNodes[i]).remove();
                }
            }
            $(menuBarNode).removeData("deferLoadNodes");
            setTimeout(function() {
                p.c.menu.getAndShowSubLevel(menuItem);
                /*if(pega.mobile && pega.mobile.nativenav){
                  menuBarNode.backNavId = pega.mobile.nativenav.addToHistoryAndBlock(pega.c.menu.killMenus, pega.c.menu, {data:{parentMenu:menuBarNode}});
                }*/
            }, 0);

            if (touchable) {
                /* Stop the event propagation if childnodes are present and hence do not execute the action. */
                if (menuItem.attr("data-childnodesid")) {
                    //BUG-195012 :start , Before stopping the event , do a sendEvent
                    if (pega && pega.desktop && pega.desktop.MouseEventSingleton) {
                        var obj = new pega.desktop.MouseEventSingleton();
                        obj._doOnMouseClick(e);
                        //pega.d.sendEvent("DesktopMouseClick", eventObj, "ASYNC");
                    }
                    //BUG-195012 : end
                  
                    //Registering for back button navigation
                    if(pega.mobile && pega.mobile.nativenav){
                        menuBarNode.backNavId = pega.mobile.nativenav.addToHistoryAndBlock(pega.c.menu.killMenus, pega.c.menu, {data:{parentMenu:menuBarNode}});
                    }
                    e.stopImmediatePropagation();
                    e.preventDefault();
                    pega.c.menu.killMenus();
                }
            }
            $(document.body).on("click.bodyone contextmenu.bodyone", {
                    menuItem: menuItem,
                    menuBarNode : menuBarNode
                }, function(e) {
                    $(this).off(e);
                    if(!touchable){
                        p.c.menu.hideSubLevel(e.data.menuItem);
                    }else{
                        /*
                            This is to unhighlight the item with no children and hide the sublevels for items with children.
                        */
                        p.c.menu.hideSubLevelDragCheck(e);
                        //For native navigation. Removing the menu panel events from queue
                        if(pega.mobile && pega.mobile.nativenav){
                           pega.mobile.nativenav.removeFromHistory(e.data.menuBarNode.backNavId);
                        }
                    }
                });
            p.c.menu.setState(menuItem,false);
        },

        touchcount: 0,

        handleTouchStart: function(e) {
            pega.c.menu.touchcount++;
        },

        /**
         * [handleTouchEnd description]
         * @param  {[type]} e
         * @return {[type]}
         */
        handleTouchEnd: function(e) {
            pega.c.menu.isFromTouchEvent = true;
            var menuItem = p.c.menu.currentActive = $(this).parent();
            p.c.menu.hideSubLevels(menuItem.parent());
            p.c.menu.getAndShowSubLevel(menuItem);
            /* Stop the event propagation if childnodes are present and hence do not execute the action. */
            if (menuItem.attr("data-childnodesid")) {
                e.stopImmediatePropagation();
                e.preventDefault();
            }

            $(document.body).on("touchend.bodyone", {
                menuItem: menuItem
            }, function(e) {
                /*
                    This is to unhighlight the item with no children and hide the sublevels for items with children.
                */
                $(this).off(e);
                p.c.menu.hideSubLevelDragCheck(e);
            });
            
            
          if(pega.cl.isTouchAble()){setTimeout(function(){pega.c.menu.isFromTouchEvent = false;},1);}
          p.c.menu.setState(menuItem,false);
        },

        hideSubLevelDragCheck: function(e) {
            var target = e.data.menuItem;
            if (!p.c.menu.dragging) {
                p.c.menu.hideSubLevel(e.data.menuItem);
            } else {
                /* Make dragging false only when hideNode is fired for currentActive element. The order in which it is fired is in the order of its registration. */
                if (target[0] == p.c.menu.currentActive[0]) p.c.menu.dragging = false;
                $(document.body).on("touchend.bodyone", {
                    menuItem: e.data.menuItem
                }, function(e) {
                        $(this).off(e);
                        p.c.menu.hideSubLevelDragCheck(e);
                    }
                );
            }
        },

        dragging: false,

        handleTouchMove: function(e) {
          //BUG-297955 : fix to avoid flag setting for touchmove on fullscreen menu header
          var isNonMenuItemTouchMove = $(e.target).parent().hasClass('menu-slide-back-anchor');
          if(!isNonMenuItemTouchMove)
            pega.c.menu.dragging = true;
        },
        handleRegularItemClick:function(e){
          var menuItem = $(this).parent();
          /*Do not fire menu action if dragging is true.*/
          if(pega.c.menu.dragging || (e.originalEvent && e.originalEvent.pointerType=="touch" && menuItem.attr("data-childnodesid"))){
            e.stopImmediatePropagation();
            e.preventDefault();
            if(pega.c.menu.dragging) {
              pega.c.menu.dragging = false;
            }
          }
          p.c.menu.setState(menuItem,false);
        },
        /**
         *  This method completes the sliding into next level for the supplied menu item
         */
        slideToNextLevel: function(menuItem, ev) {
            var menuNode = menuItem.parent();
          
            if(pega.mobile && pega.mobile.nativenav && ev != undefined && $("ul > li", menuItem).get(0)){
                $.data($("ul > li", menuItem).get(0), "backNavId", pega.mobile.nativenav.addToHistory(pega.c.menu.nativeSlideBack, this, menuItem));
            }
          
            if (menuNode.closest(".menu-slider").hasClass("menu-fullscreen")) {
                menuItem.siblings().find(".menu-slider-item-active").addBack().removeClass("menu-slider-item-active");
            }
            menuItem.addClass("menu-slider-item-active");
            menuNode.addClass("menu-active");
            if (isOrientationRTL) {
                $(menuItem).closest(".menu-slider").children().first().css({
                    marginRight: "-" + (($(menuItem).parentsUntil(".menu-slider > .menu-bar, .menu-slider > .menu", ".menu").length + 1) * 100) + "%"
                });
            } else {
                $(menuItem).closest(".menu-slider").children().first().css({
                    marginLeft: "-" + (($(menuItem).parentsUntil(".menu-slider > .menu-bar, .menu-slider > .menu", ".menu").length + 1) * 100) + "%"
                });
                if (ev != undefined) {
                    ev.type == "keydown" && setTimeout(function() {
                        menuItem.children('.menu').children().eq(2).addClass('menu-item-active').children('.menu-item-anchor').first().focus();
                    }, 100);
                }

            }
        },
      
      
        //Native navigation
        nativeSlideBack: function(node){
            pega.c.menu.handleMenuSlide.apply($(".menu-item-anchor.menu-slide-back-anchor",node).get(0));
        },
        //

        /**
         * [handleMenuSlide description]
         * @param  {[type]} e
         * @return {[type]}
         */
        handleMenuSlide: function(e) {
            
            var menuItem = $(this).parent();
            if (($(menuItem[0]).siblings()[0]) != undefined) {
                var menuItemWithBackNavId = $(menuItem[0]).siblings()[0];
            }
            
            if(!e){
                e = {};
            }
            
            var menuNode = menuItem.parent();

            var keyCodes = {
                LEFT: 37,
                UP: 38,
                RIGHT: 39,
                DOWN: 40,
                ESCAPE: 27,
                ENTER: 13,
                TAB: 9
            };

            var shiftKey = e.shiftKey;

            if (e.type == "keydown") {
                switch (e.keyCode) {
                    case keyCodes.UP:
                        /*Not calling p.c.menu.highlightPrevious(menuItem, true) as it was giving other errors.*/
                        var prevElement = menuItem.prevAll('.menu-item').not('.menu-item-disabled').first();
                        menuItem.hasClass('menu-item-active') && menuItem.removeClass('menu-item-active');
                        menuItem.children('.menu-item-anchor').first().prop("tabindex", "-1");
                    
                        if (prevElement.length) {
                            prevElement.addClass('menu-item-active');
                            prevElement.children('.menu-item-anchor').first().prop("tabindex", "0");
                            prevElement.children('.menu-item-anchor').first().focus();
                        } else {
                          var lastAnchorElement = menuItem.parent().children('.menu-item')
                              .not('.menu-item-disabled').last().addClass('menu-item-active')
                              .children('.menu-item-anchor').first();
                            lastAnchorElement.focus();
                            lastAnchorElement.prop("tabindex", "0");
                        }
                        e.preventDefault();
                        return;
                    case keyCodes.DOWN:
                        /*Not calling p.c.menu.highlightNext(menuItem, true) as it was giving other errors. */
                       var nextElement = menuItem.nextAll('.menu-item').not('.menu-item-disabled').first();
                        menuItem.hasClass('menu-item-active') && menuItem.removeClass('menu-item-active');
                        menuItem.children('.menu-item-anchor').first().prop("tabindex", "-1");
                        if (nextElement.length) {
                            nextElement.addClass('menu-item-active');
                            nextElement.children('.menu-item-anchor').first().prop("tabindex", "0");
                            nextElement.children('.menu-item-anchor').first().focus();
                        } else {  
                          var firstElement = menuItem.parent().children('.menu-item')
                              .not('.menu-item-disabled').first().addClass('menu-item-active')
                              .children('.menu-item-anchor').first();
                          firstElement.prop("tabindex", "0");
                          firstElement.focus();
                        }
                        e.preventDefault();
                        p.c.menu.setState(menuItem,false);
                        return;
                    case keyCodes.LEFT:
                        break;
                    case keyCodes.RIGHT:
                        break;
                    case keyCodes.TAB:
                    menuItem.hasClass('menu-item-active') && menuItem.removeClass('menu-item-active');
                    return;
                    case keyCodes.ENTER:
                        break;
                    default:
                        e.preventDefault();
                        return;
                }
            }
            if ((e.type == "click" || e.type == "keydown") || (touchable && pega.c.menu.touchcount == 1) || $.data(menuItem[0],"backNavId") || (menuItemWithBackNavId && $(menuItemWithBackNavId).data())) {
                pega.ui.statetracking.setBusy("handleMenuSlide"); // inform test tools and time tracker menus busy - big help to UIRegression portal tests

                if ($(this).hasClass("menu-slide-back-anchor")) {
                    if (e.type == "keydown" && [13, 37].indexOf(e.keyCode) < 0) {
                        e.stopImmediatePropagation();
                        e.preventDefault();
                        return;
                    }
                    if (!$(e.target).hasClass("menu-full-close-icon")) {
                        if (!menuNode.closest(".menu-slider").hasClass("menu-fullscreen")) {
                            menuNode.parent().removeClass("menu-slider-item-active").removeClass('menu-item-active');
                        }
                        menuNode.parent().parent().removeClass("menu-active");
                        if (isOrientationRTL) {
                            $(menuItem).closest(".menu-slider").children().first().css({
                                marginRight: "-" + (($(this).parentsUntil(".menu-slider > .menu-bar, .menu-slider > .menu", ".menu").length - 1) * 100) + "%"
                            });
                        } else {
                            $(menuItem).closest(".menu-slider").children().first().css({
                                marginLeft: "-" + (($(this).parentsUntil(".menu-slider > .menu-bar, .menu-slider > .menu", ".menu").length - 1) * 100) + "%"
                            });
                        }
                        try {
                            /* Focus the first anchor from the parent menu. */
                            if(menuItem.hasClass('menu-item-active')) {
                              menuItem.removeClass('menu-item-active');
                              $(this).closest(".menu").parent().addClass('menu-item-active').children(".menu-item-anchor").focus();
                            }
                           /* if (e.type == "keydown") { */
                                /* $(this).closest(".menu").parent().parent().children(".menu-item-enabled").first().addClass('menu-item-active').children(".menu-item-anchor").focus(); */
                          
                          /* set focus on the parent item and make it active */
                          
                            /*}*/
                        } catch (ex) {}
                        if(e.stopImmediatePropagation){
                           e.stopImmediatePropagation();
                           e.preventDefault();  
                        }
                        p.c.menu.setState(menuItem,false,true);
                      
                        
                        if(pega.mobile && pega.mobile.nativenav){
                            pega.mobile.nativenav.removeFromHistory($.data(menuItem[0],"backNavId"));
                            $.data(menuItem[0],"backNavId","");
                        }
                    }

                } else {
                    if (pega.c.menu.dragging) {
                        e.stopImmediatePropagation();
                        e.preventDefault();
                        pega.c.menu.dragging = false;
                    } else if (menuItem.attr("data-childnodesid")) {
                        if (e.type == "keydown" && [13, 39].indexOf(e.keyCode) < 0) {
                            e.stopImmediatePropagation();
                            e.preventDefault();
                            return;
                        }
                        menuItem.hasClass('menu-item-active') && menuItem.removeClass('menu-item-active');
                        if (!menuItem.children(".menu").get(0)) {
                            p.c.menu.getAndShowSubLevel(menuItem);
                        } else {
                            p.c.menu.slideToNextLevel(menuItem, e);
                            p.c.menu.positionFullscreenMenuSlide(menuItem);
                            //e.type == "keydown" && menuItem.children('.menu').children().eq(2).addClass('menu-item-active').children('.menu-item-anchor').first().focus();
                        }
                        e.stopImmediatePropagation();
                        e.preventDefault();     
                    }
                  
                    //BUG-372545 : When creating case we are removing menu item from back navigation history.
                    if (pega.mobile && pega.mobile.nativenav && !menuItem.children(".menu").get(0)) {
                        if (menuItemWithBackNavId != undefined) {
                            pega.mobile.nativenav.removeFromHistory($.data(menuItemWithBackNavId, "backNavId"));
                            $.data(menuItemWithBackNavId, "backNavId", "");
                        }
                    }
                  
                    p.c.menu.setState(menuItem,false);
                }
                //BUG-308293: if the button which launched full screen menu is behind the close icon, then do e.preventDefault
                if($(e.target).hasClass("menu-full-close-icon")) {
                    e.preventDefault();
                }
              
                pega.c.menu.touchcount = 0;
                pega.ui.statetracking.setDone();
                
              
            } else {
                if (pega.c.menu.dragging) {
                    pega.c.menu.dragging = false;
                }
                pega.c.menu.touchcount = 0;
                e.stopImmediatePropagation();
                e.preventDefault();  
                return;
            }
            

        },

        positionFullscreenMenuSlide: function(menuItem) {
            try {
                //menuItem.children(".menu").children().first().children(".menu-item-anchor").focus();
                if (menuItem.closest(".menu-slider").hasClass("menu-fullscreen")) {
                    menuItem.children(".menu").css({
                        marginTop: 0,
                        marginLeft: 0,
                        width: "auto"
                    });

                    var btw = p.c.menu.getComputedStyle(menuItem.get(0), "border-top-width");
                    btw = (btw && btw != "") ? (isNaN(parseInt(btw)) ? 0 : parseInt(btw)) : 0;
                    var brw = p.c.menu.getComputedStyle(menuItem.get(0), "border-right-width");
                    brw = (brw && brw != "") ? (isNaN(parseInt(brw)) ? 0 : parseInt(brw)) : 0;
                    var blw = p.c.menu.getComputedStyle(menuItem.get(0), "border-left-width");
                    blw = (blw && blw != "") ? (isNaN(parseInt(blw)) ? 0 : parseInt(blw)) : 0;

                    menuItem.children(".menu").css({
                        marginTop: (-1 * (menuItem.get(0).offsetTop + btw)) + "px",
                        marginLeft: brw + "px",
                        width: "calc(100% + " + (brw + blw) + "px)"
                    });
                }
            } catch (ex) {}
        },

        /**
         * [handleKeyPress description]
         * @param  {[type]} e
         * @return {[type]}
         */
        handleKeyPress: function(e) {

            var menuItem = $(this).parent();
            var menuBarNode = p.c.menu.getMenuBarNode(menuItem.parent());
            var orientation = "vertical";
            if (menuBarNode.get(0) && menuBarNode.hasClass("menu-bar") && menuBarNode.hasClass("menu-horizontal")) {
                orientation = "horizontal";
            }

            var isMenuBar = p.c.menu.isMenuBar(menuItem);

            var keyCodes = {
                LEFT: 37,
                UP: 38,
                RIGHT: 39,
                DOWN: 40,
                ESCAPE: 27,
                ENTER: 13,
                TAB: 9
            };

            var shiftKey = e.shiftKey;

            switch (e.keyCode) {
                case keyCodes.LEFT:                    
                    if (isMenuBar) {
                        if (orientation == "horizontal") {
                            p.c.menu.highlightPrevious(menuItem, true);
                        } else {
                            p.c.menu.handleRTLkeyPress(true, menuItem);
                        }
                    } else {
                        /**
                        isSubLevelOpened variable to hold value to determine whether sublevel is already opened or not. This is added as part of fix for BUG-245181
                        Sublevel was opening two times in this scenario. isSubLevelOpened check is added to prevent this. So that sublevel will open once.
                        Ideally this is not the proper fix. This is more like a workaround. Code should be refactored to handle key events for both RTL and non-RTL cases.
                        **/
                        var isSubLevelOpened = false;
                        if (orientation == "vertical" || !p.c.menu.isMenuBarItemChild(menuItem)) {
                            isSubLevelOpened = p.c.menu.handleRTLkeyPress(true, menuItem);
                        }

                        if (isOrientationRTL && !isSubLevelOpened) {
                            p.c.menu.openSubLevel(menuItem);
                        }
                    }
                    e.preventDefault();
                    break;
                case keyCodes.RIGHT:
                    if (isMenuBar) {
                        if (orientation == "horizontal") {
                            p.c.menu.highlightNext(menuItem, true);
                        } else {
                            p.c.menu.handleRTLkeyPress(false, menuItem);
                        }
                    } else {
                        var isSubLevelOpened = false;
                        if (orientation == "vertical" || !p.c.menu.isMenuBarItemChild(menuItem)) {
                            isSubLevelOpened = p.c.menu.handleRTLkeyPress(false, menuItem);
                        }

                        if (!isOrientationRTL && !isSubLevelOpened) {
                            p.c.menu.openSubLevel(menuItem);
                        }
                    }
                    e.preventDefault();
                    break;
                case keyCodes.UP:
                    if (isMenuBar) {
                        if (orientation == "horizontal") {
                            //Do nothing.
                        } else {
                            p.c.menu.highlightPrevious(menuItem, true);
                        }
                    } else {
                        if (menuItem.is(":first-child") && p.c.menu.isMenuBarItemChild(menuItem) && orientation == "horizontal") {
                            p.c.menu.closeCurrentLevel(menuItem);
                        } else {
                            p.c.menu.highlightPrevious(menuItem, true);
                        }
                    }
                    e.preventDefault();
                    break;
                case keyCodes.DOWN:
                    if (isMenuBar) {
                        if (orientation == "horizontal") {
                            p.c.menu.openSubLevel(menuItem);
                        } else {
                            p.c.menu.highlightNext(menuItem, true);
                        }
                    } else {
                        p.c.menu.highlightNext(menuItem, true);
                    }
                    e.preventDefault();
                    break;
                case keyCodes.TAB:
                    if (isMenuBar) {
                    menuItem.hasClass('menu-item-active') && menuItem.removeClass('menu-item-active');
                    return;
                    } else {
                         if (menuBarNode.get(0)) {
                        p.c.menu.hideSubLevels(menuBarNode);
                        var menuBarItem = p.c.menu.getMenuBarItem(menuItem);
                        p.c.menu.highlight(menuBarItem, false, false);
                        e.preventDefault();
                        } else {
                            if (p.c.menu.showMenuTarget) {
                                $("#" + $(p.c.menu.showMenuTarget).attr("data-menuid")).hide();
                                p.c.menu.showMenuTarget.focus();
                            }
                        }
                    }
                    break;
                case keyCodes.ESCAPE:
                    p.c.menu.closeCurrentLevel(menuItem, menuBarNode.get(0) ? false : true);
                    break;
                case keyCodes.ENTER:
                    /*
                        The setTimeout is needed to hide only after the current thread has 
                        terminated as actions do not seem to execute for hidden items.
                    */
                    setTimeout(function() {
                        if (menuBarNode.get(0)) {
                            p.c.menu.hideSubLevels(menuBarNode);
                        }
                    }, 0);
                    break;
            }
        },

        handleRTLkeyPress: function(fromLeftKey, menuItem) {
            var shouldOpen = (isOrientationRTL && fromLeftKey) || (!isOrientationRTL && !fromLeftKey);
            if (shouldOpen) {
                p.c.menu.openSubLevel(menuItem);
            } else {
                p.c.menu.closeCurrentLevel(menuItem);
            }
            return shouldOpen;
        },

        getMenuBarItem: function(menuItem) {
            while (menuItem) {
                menuItem = $(document.getElementById("menu-item-" + $(menuItem).parent().attr("id")));
                if (menuItem.parent().hasClass("menu-bar") || (menuItem[0] && menuItem[0].tagName == "BODY")) {
                    break;
                }
            }
            return menuItem;
        },

        highlight: function(menuItem, doNotFocus) {
           var isSliderMenu = menuItem.closest('.menu-slider');
           var activeMenu = menuItem.closest('.menu-bar').find('li.menu-item-active');
            menuItem.siblings().each(function(index, elem) {
                if($(elem).hasClass("menu-item-active") && !(isSliderMenu && isSliderMenu.length > 0)) {
                    pega.c.menu.hideSubLevel(elem);
                }
                $(elem).removeClass("menu-item-active");
            });
            //menuItem.siblings().removeClass("menu-item-active");
            //BUG-414702 : donot focus unless the document has focus in IE.
            if(!doNotFocus && (!pega.util.Event.isIE || (pega.util.Event.isIE && document.hasFocus()))){
              menuItem.children("a").focus();
              menuItem.children('.menu-item-anchor').prop("tabindex", "0");
            }
            
            activeMenu.removeClass('menu-item-active');
            menuItem.addClass("menu-item-active");
            
            /*BUG-349996: add the active class to the outer li as well.*/
            var isActiveSliderMenu = menuItem.closest('.menu-slider-item-active');
            if(isActiveSliderMenu.length) {
                isActiveSliderMenu.addClass('menu-item-active');
            }
        },

        unhighlight: function(menuItem) {
          p.c.menu.hideSubLevels($(menuItem));
          menuItem.children('.menu-item-anchor').prop("tabindex", "-1");
          menuItem.removeClass("menu-item-active");
        },

        highlightPrevious: function(menuItem, rotate, doNotFocus) {
            p.c.menu.unhighlight(menuItem);
            var previousItem = $(menuItem).prevAll(".menu-item-enabled");
            if (previousItem.get(0)) {
                p.c.menu.highlight(previousItem.first(), doNotFocus);
            } else if (rotate) {
                var lastItem = $(menuItem).parent().children(".menu-item-enabled").last();
                if (lastItem.get(0)) {
                    p.c.menu.highlight(lastItem, doNotFocus);
                }
            }
        },

        highlightNext: function(menuItem, rotate, doNotFocus) {
            p.c.menu.unhighlight(menuItem);
            var nextItem = $(menuItem).nextAll(".menu-item-enabled");
            if (nextItem.get(0)) {
                p.c.menu.highlight(nextItem.first(), doNotFocus);
            } else if (rotate) {
                var firstItem = $(menuItem).parent().children(".menu-item-enabled").first();
                if (firstItem.get(0)) {
                    p.c.menu.highlight(firstItem, doNotFocus);
                }
            }
        },

        openSubLevel: function(menuItem) {
            p.c.menu.getAndShowSubLevel(menuItem);
            if (menuItem.attr("id") && menuItem.attr("id") != "") {
                $(document.body).on("click." + menuItem.attr("id").replace(/\$/ig, "_") + " contextmenu." + menuItem.attr("id").replace(/\$/ig, "_"), {
                    menuItem: menuItem
                }, function(e) {
                    $(this).off(e);
                    p.c.menu.hideSubLevel(e.data.menuItem);
                });
                p.c.menu.setState(menuItem,false);
            }
        },

        closeCurrentLevel: function(menuItem, isContextMenu) {
            var parentMenuItem = document.getElementById("menu-item-" + $(menuItem).parent().attr("id"));
            if (parentMenuItem) {
                $(document.body).off("." + $(parentMenuItem).attr("id").replace(/\$/ig, "_"));
                p.c.menu.hideSubLevels($(parentMenuItem));
                p.c.menu.highlight($(parentMenuItem));
            } else if (isContextMenu) {
                if (p.c.menu.showMenuTarget) {
                    $("#" + $(p.c.menu.showMenuTarget).attr("data-menuid")).hide();
                    p.c.menu.showMenuTarget.focus();
                }
            } else {
                p.c.menu.hideSubLevels($(menuItem).parent());
                p.c.menu.highlight(menuItem);
            }
        },

        focusInHandler: function(e) {
            pega.control.menu.highlight($(this).parent(), true);
        },

        focusOutHandler: function(e) {
            var subMenu = document.getElementById($(this).parent().attr("data-childnodesid"));
            if (!subMenu || (subMenu && subMenu.offsetHeight == 0)) {
              /* Why parent menu is unhighlighted */
                /*p.c.menu.unhighlight($(this).parent());*/
            }
        },

        isMenuBar: function(menuItem) {
            return $(menuItem).parent().hasClass("menu-bar");
        },

        isMenuBarItemChild: function(menuItem) {
            var parentMenuItem = document.getElementById("menu-item-" + $(menuItem).parent().attr("id"));
            return p.c.menu.isMenuBar(parentMenuItem);
        },

        handleDesktopClick: function(e) {
            if (pega.util.Event.getTarget(e).ownerDocument !== document) {
                //if (!touchable) {
                    $(document.body).triggerHandler("click.bodyone");
                //} else {
                    if (pega.c.menu.dragging) pega.c.menu.dragging = false;
                    $(document.body).triggerHandler("touchend.bodyone");
                //}
            }
        },

        /**
         * [killMenus description Api for external access to hide all new menus]
         * @return {[type]}
         */
        killMenus: function(parentNodeInfo) {
            if(parentNodeInfo){
              if(pega.mobile && pega.mobile.nativenav){
                    pega.mobile.nativenav.removeFromHistory(parentNodeInfo.data.parentMenu.backNavId);
                    parentNodeInfo.data.parentMenu.backNavId = "";
              }
            }
            if (deferLoadRequest && deferLoadRequest.conn && deferLoadRequest.conn.abort) {
                deferLoadRequest.conn.abort();
                pega.u.d.resumeAjaxSequencer();
            }
            //if (!touchable) {
                $(document.body).triggerHandler("click.bodyone");
            //} else {
                if (pega.c.menu.dragging) pega.c.menu.dragging = false;
                $(document.body).triggerHandler("touchend.bodyone");
            //}
        },

        /**
         * [bindEvents description]
         * @return {[type]}
         */
        bindEvents: function() {
            /* Touch and Click Event Bindings */

            $(document.body).on("click", ".menu-bar-regular > .menu-item > .menu-item-anchor", p.c.menu.handleMenuBarItemClick);
            $(document.body).on("click", ".menu-vertical > .menu-item > .menu-item-anchor", p.c.menu.handleVerticalMenuItemClick);
            $(document.body).on("click", ".menu-format-slidingmenu > .menu-item > .menu-item-anchor", p.c.menu.handleVerticalMenuItemClick);
            $(document.body).on("click", ".menu-slider .menu-item > .menu-item-anchor", p.c.menu.handleMenuSlide);
            $(document.body).on("click", ".menu-regular .menu-item > .menu-item-anchor", p.c.menu.handleRegularItemClick);
            $(document.body).on("keydown", ".menu-slider .menu-item > .menu-item-anchor", p.c.menu.handleMenuSlide);

            if (touchable) {
                $(document.body).on("touchend", ".menu-bar-regular > .menu-item > .menu-item-anchor", p.c.menu.handleMenuBarItemClick);
                $(document.body).on("touchend", ".menu-vertical > .menu-item > .menu-item-anchor", p.c.menu.handleVerticalMenuItemClick);
                $(document.body).on("touchend", ".menu-format-slidingmenu > .menu-item > .menu-item-anchor", p.c.menu.handleVerticalMenuItemClick);
                $(document.body).on("touchend", ".menu-slider .menu-item > .menu-item-anchor", p.c.menu.handleMenuSlide);
                $(document.body).on("touchstart", ".menu-slider .menu-item > .menu-item-anchor", p.c.menu.handleTouchStart);
                $(document.body).on("touchend", ".menu-regular > .menu-item > .menu-item-anchor", p.c.menu.handleTouchEnd);
                //BUG-297955 : fix to avoid touchmove to fire over extra blank space in fullscreen menu
                $(document.body).on("touchmove", ".menu-panel-wrapper, .menu-fullscreen > .menu, .menu-slider > .menu", p.c.menu.handleTouchMove);
            }

            /* Keyboard Event Bindings bind always*/ 
                $(document.body).on("keydown", ".menu-bar-regular > .menu-item > .menu-item-anchor, .menu-regular > .menu-item > .menu-item-anchor", p.c.menu.handleKeyPress);
                /*BUG-331589: fire focusin event for all the sub levels to make them active in menubar. */
                $(document.body).on("focusin", ".menu-bar-regular > .menu-item-enabled > .menu-item-anchor, .menu-bar-regular > .menu-item-enabled > .menu-item-anchor, .menu-slider > .menu-bar > .menu-item-enabled > .menu-item-anchor, .menu-slider > .menu-bar > .menu-item-enabled .menu-item-anchor", p.c.menu.focusInHandler);
                $(document.body).on("focusout", ".menu-bar-regular > .menu-item > .menu-item-anchor", p.c.menu.focusOutHandler);

            if (pega && pega.desktop && pega.desktop.support && pega.desktop.support.getDesktopApplication && pega.desktop.support.getDesktopApplication() != null) {
                pega.desktop.registerEventListener("DesktopMouseClick", p.c.menu.handleDesktopClick);
                pega.desktop.registerEventListener("desktopRightClick", p.c.menu.handleDesktopClick);

            }
            //memory leak fix
            if (pega && pega.u && pega.u.d && pega.u.d.attachOnUnload) {
                pega.u.d.attachOnUnload(p.c.menu.unbindEvents);

                pega.u.d.attachOnload(p.c.menu.pxMenuManager.renderMenus, true);
            }

        },
        //Memory leak fix
        unbindEvents: function() {
            $(document.body).off();
            $(window).off();
            if (pega.desktop.support.getDesktopApplication() != null && pega.desktop.cancelEventListener) {
                pega.desktop.cancelEventListener("DesktopMouseClick", p.c.menu.handleDesktopClick);
                if(typeof DesktopMouseClick_nsSmartPrompt === "function"){
                   pega.desktop.cancelEventListener("DesktopMouseClick", DesktopMouseClick_nsSmartPrompt);
                 }
                pega.desktop.cancelEventListener("desktopRightClick", p.c.menu.handleDesktopClick);
            }

            /**
            *   unbind event handler skipHarnessContextSwitchHandler 
            */
            $('.menu-panel-wrapper').each(function(ind, val) {
                val.removeEventListener("click",pega.ctxmgr.skipHarnessContextSwitchHandler,true);
                val.removeEventListener("focusin",pega.ctxmgr.skipHarnessContextSwitchHandler,true);
            });

        },

        getComputedStyle: function(el, styleProp) {
            var computedStyleString = "";
            if (window.getComputedStyle) {
                var compStyle = document.defaultView.getComputedStyle(el, null);
                if (compStyle) {
                    computedStyleString = compStyle.getPropertyValue(styleProp);
                }
            } else if (el.currentStyle) {
                computedStyleString = el.currentStyle[styleProp];
                if (!computedStyleString && styleProp.indexOf('-') != -1) {
                    computedStyleString = el.currentStyle[styleProp.replace(/(-.)/g, function(x) {
                        return x.charAt(1).toUpperCase();
                    })];
                }
            }
            return computedStyleString;
        },
        /*In Firefox, getComputedStyle returns an empty string if the document is rendered in background (a display none iframe).
          This seems to be an expected behavior for CSS engine of firefox.
          readStyleFromSkin is the last resort to read the style from style sheets, as there seems to be no other way.
          This is used only for some edge cases in firefox.
        */
        readStyleFromSkin: function(selectorText, cssProp){
            var skinSheet,returnStyle="";
            if(cssProp && selectorText){
              try{
                  for (var i=0; i < document.styleSheets.length; i++){
                    if(document.styleSheets[i].href && document.styleSheets[i].href.indexOf("webwb/pzskinv2_")>0){
                      skinSheet = document.styleSheets[i];
                      break;
                    }
                  }
                  if(skinSheet && skinSheet.cssRules && skinSheet.cssRules.length){
                    for (var i=0; i < skinSheet.cssRules.length; i++){
                      if(skinSheet.cssRules[i].selectorText && skinSheet.cssRules[i].selectorText == selectorText){
                        if(skinSheet.cssRules[i].style && cssProp){
                          returnStyle = skinSheet.cssRules[i].style[cssProp];
                        }
                        break;
                      }
                    }
                  }
                  skinSheet = null; 
              }catch(e){}
            }
            return returnStyle;
        },

        getSkinConfig: function(format) {
            var el = $("body > .menu-skin-data");
            if (el.get(0)) {
                el.removeClass().addClass(format + " menu-skin-data");
                el = el.get(0);
            } else {
                el = document.createElement("DIV");
                el.setAttribute("class", format + " menu-skin-data");
                $(document.body).append(el);
            }
            var skinConfigMap = {};
            var styleString = p.c.menu.getComputedStyle(el, "font-family");
            if(styleString == "" && pega.util.Dom.hasClass(document.documentElement, "ff")){
               styleString = p.c.menu.readStyleFromSkin("."+format+".menu-skin-data", "font-family");
            }
            var styleStringArr = styleString.split("_");
            for (var i = 0; i < styleStringArr.length; i++) {
                skinConfigMap[styleStringArr[i].split("-")[0]] = styleStringArr[i].split("-")[1];
            }
            for (var prop in skinConfigMap) {
                skinConfigMap[prop] = (skinConfigMap[prop] === "true" ? true : (skinConfigMap[prop] === "false" ? false : skinConfigMap[prop]));
            }
            return skinConfigMap;
        },

        doMenuBarCleanup: function(reloadElement) {
            var menubarIds = pega.c.menu.pxMenuManager.getMenuIds();

            $.each(menubarIds, function(name, val) {
                if (reloadElement && $.contains(reloadElement, $("#" + name).get(0))) {
                    $.each(val, function(index, value) {
                        var elem = document.getElementById(value);
                        if (elem) $(elem).parent().remove();
                    });
                    delete menuIdQueue[name];
                }
            });
        },

        doShowMenuCleanup: function(reloadElement) {
            $(".menu-in-modal").remove();
        },

        makeNodeActive: function(data,metadata) {
          var expressionId, expressionResult,
              activeFlag = false,
              queue = [];
          for (; data && !activeFlag;) {
            if (data.nodes && data.nodes.length > 0) {
              $.each(data.nodes, function(i, innerNode) {
                var expRes = false;
                if (innerNode) {
                  if(innerNode.pyExpressionId){
                    expressionId = innerNode.pyExpressionId;
                    if(expressionId && expressionId.startsWith("EXP=")){
                        expressionResult = [];
                        expressionResult[pega.ui.ExpressionEvaluator.ACTIVE_WHEN] = pega.ui.TemplateEngine.getCurrentContext().getWhenResult(expressionId);
                    } else{
                        expressionResult = pega.ui.ExpressionEvaluator.evaluateClientExpressions(expressionId);
                        innerNode.pyExpressionIdMeta = pega.ui.ExpressionEvaluator.getExpressionMetaToStamp(expressionId);
                    }                   
                  }
                  if(expressionResult){
                      if(typeof expressionResult[pega.ui.ExpressionEvaluator.ACTIVE_WHEN] == "object" && expressionResult[pega.ui.ExpressionEvaluator.ACTIVE_WHEN][0] != 'undefined'){
                        expRes = expressionResult[pega.ui.ExpressionEvaluator.ACTIVE_WHEN][0];
                         
                      } else{
                        expRes = expressionResult[pega.ui.ExpressionEvaluator.ACTIVE_WHEN];     
                      }
                  }
                  
                  /*expRes = expressionResult && expressionResult[pega.ui.ExpressionEvaluator.ACTIVE_WHEN] ? !!expressionResult[pega.ui.ExpressionEvaluator.ACTIVE_WHEN] : false;*/
                  if (((innerNode && "true" == innerNode.pyIsActiveNavItem) || expRes) && !activeFlag) {
                    activeFlag = true;
                    data.isActiveIndex = i;
                    /*return false;*/
                  }
                  queue.push(innerNode);
                }
              });
            }
            data = queue.shift();
          }
          return activeFlag;
        },
      
        setActiveIndex : function(data,metadata) {
            var activeFlag = p.c.menu.makeNodeActive(data, metadata);
            var sessionObj = {};
            var originalMenuState;
            var keyToMenuState = metadata ? metadata["uniqueMenuId"] : undefined;
            if(localStorage.getItem("menuState")){              
                sessionObj = originalMenuState = JSON.parse(localStorage.getItem("menuState"));
            }
            /*if(!metadata.isActiveIndex && !activeFlag && keyToMenuState && !sessionObj[keyToMenuState]){
                data.isActiveIndex = 0;
            }*/
        },
        
        maintainState: function() {
          var parseObj,
              $menuAll = document.querySelectorAll('.content-field ul.menu, .content-field ul.menu-bar'),
              $menuItems = $($menuAll).children(".menu-item"),
              $activeMenuItems = $menuItems.filter("[data-active-menu]");
              //$nTopMenu = $('div[string_type="field"]').children("ul[data-menu-id]"),
              //$nTopSliderMenu = $('div[string_type="field"]').children().children("ul[data-menu-id]");
              
          /* Need to consider menus in old layout mode */
          //var $allTopMenu = $nTopMenu.add($nTopSliderMenu);    
          /* Make first enabled menu item active by default */
          /* Removing this because ofBUG-370750 */
        /*  $allTopMenu.each(function() {
            $(this).children("li.menu-item").not(".menu-item-disabled").first().addClass("menu-item-active");
          });*/
          /* Active When is configured */          
          $activeMenuItems.each(function(index) {
            var that = $(this);

            /* Find the trail of parent menu-items for present activeWhen */
            var parentMenus = that.parents(".menu-item", ".menu-slider");

            parentMenus.each(function() {
              var mthat = $(this);
              if (!mthat.data("active-menu")) {
                /* Set data-active-menu for parent menu trail for maintaining state */
                $(mthat).attr('data-active-menu', '');
                p.c.menu.setState(mthat, false);
              }
            });
            
            p.c.menu.setState(that, false);

          });

          if (localStorage.getItem("menuState")) {
            
            parseObj = JSON.parse(localStorage.getItem("menuState"));
            
            /* Sort the parsed object by key so that slider menu is opened in correct sequence */
            
            var sortObjectByKey = function(obj) {
              var key, keys = [], sorted_obj = {};
              for (key in obj) {
                obj.hasOwnProperty(key) && keys.push(key);
              }
              keys.sort();
              keys.forEach(function(key,i) {
                sorted_obj[key] = obj[key];
              });

              return sorted_obj;
            };
            parseObj = sortObjectByKey(parseObj);
            
            /* Get State of Menu */
            $.each(parseObj, function(menuName, val) {             
              /* Slider back Navigation State */
              var backSlide = false;
              if ("string" == typeof val && val.indexOf("-back") > 0) {
                var backSlide = true;
                val = val.replace(/-back/g, "");
                val = parseInt(val);
              }
              
              var menuItem = $($menuAll).children('ul[data-menu-id="' + menuName + '"] > li.menu-item:eq("'+ val +'")');
              
              if (menuItem.length) {
                  /* Make menu item active */
                  $menuItems.filter(menuItem).addClass("menu-item-active").siblings().toggleClass("menu-item-active", false);

                  /* Slide to next level if menu which is visible has child nodes */
                  if (menuItem.data("childnodesid") && menuItem.children("ul.menu").length && !backSlide && menuItem.filter(":visible").length) {
                      pega.control.menu.slideToNextLevel(menuItem);
                  } else if (menuItem.attr("isdeferload") == "true") {

                  }

              }
            });
          }
          $activeMenuItems.each(function(index) {
            $(this).removeAttr("data-active-menu");
          });
          
        },
        setState: function(menuItem, setVal, back) {

          var parseObj, menuState = {},
              originalMenuState = {};
          /* Menu State Object - localStorage.menuState: {pxMenu1: "8", pxMenu2: "5", pxMenu3: "6"} */
          
          /* Add new key to Menu State */
          if (!setVal) { /* Set keys in session storage only set through event */
            menuState[$(menuItem).parent().data("menu-id")] = $(menuItem).parent().children(".menu-item:not(.menu-item-separator)").index($(menuItem));

            if (localStorage.getItem("menuState")) {

              originalMenuState = JSON.parse(localStorage.getItem("menuState"));

            }

            /* Merge the newly added key to Present State */
            var mergeObj = [originalMenuState, menuState];
            
            for (var i = 1; i < mergeObj.length; i++) {
              if (mergeObj[i]) {
                for (var key in mergeObj[i]) {
                  if (mergeObj[i].hasOwnProperty(key)) {
                    originalMenuState[key] = mergeObj[i][key];
                  }
                }
              }
            }
            
            if (back && $(menuItem).parent().data("menu-id")) {
              /* Delete the present menu id and add "-back" Identifier string for parent menu */
              delete originalMenuState[$(menuItem).parent().data("menu-id")];
              var menuKey = $(menuItem).parent().parent().closest("ul[data-menu-id]").data("menu-id");
              if(menuKey !=undefined && originalMenuState[menuKey]!=undefined){
                originalMenuState[menuKey] = originalMenuState[menuKey] + "-back";
              }
            }
            /* Set merged menu state to localStorage */
            localStorage.setItem("menuState", JSON.stringify(originalMenuState));
          }
      },
      clearState: function() {
        localStorage.removeItem("menuState");
      },
      getFocusableMenuItem : function(firstElement){
        /* In case of menu item firstElement should be session storage value */
        var menuItem = $(firstElement).parent();
        if(menuItem && menuItem.length != 0){
          var menu = menuItem.parent()[0];
          if(menu && menu.hasAttribute("data-menu-id")){
            var menuId = menu.getAttribute("data-menu-id");
            if (localStorage && localStorage.getItem("menuState")) {
              parseObj = JSON.parse(localStorage.getItem("menuState"));
              if(parseObj.hasOwnProperty(menuId)){
                firstElement = $(menu).children(".menu-item-active").children()[0];
              }
            }
          }
        }
        return firstElement;
        /* end */
      },
      createStorage:function(config){
          try {
            if (!window.localStorage) throw "exception";
            localStorage.setItem("a", 1), localStorage.removeItem("a");
          } catch (e) {
            ! function() {
              var Storage = function(config) {
                function createCookie(name, value) {
                  var date, expires;
                  date = new Date();
                  date.setTime(date.getTime() + (config.expiryMS));
                  expires = "; expires=" + date.toGMTString();
                  document.cookie = name + "=" + value + expires + "; path=/";
                }

                function readCookie(name) {
                  var i, c, nameEQ = name + "=",
                      ca = document.cookie.split(";");
                  for (i = 0; i < ca.length; i++) {
                    for (c = ca[i];" " == c.charAt(0);) {
                      c = c.substring(1, c.length);
                    }
                    if (0 == c.indexOf(nameEQ)) {
                      return c.substring(nameEQ.length, c.length);
                    }
                  }
                  return null;
                }

                function setData(data) {
                  data = encodeURIComponent(JSON.stringify(data));
                  createCookie(config.name, data);
                }

                function getData() {
                  var data = readCookie(config.name);
                  return data ? JSON.parse(decodeURIComponent(data)) : {};
                }
                var data = getData();
                return {
                  length: 0,
                  getItem: function(key) {
                    return void 0 === data[key] ? null : data[key];
                  },
                  removeItem: function(key) {
                    delete data[key];
                    this.length--;
                    setData(data);
                  },
                  setItem: function(key, value) {
                    data[key] = value + "";
                    this.length++;
                    setData(data);
                  }
                };
              },
              localStorage = new Storage(config);
              window.localStorage = localStorage;
              window.localStorage.__proto__ = localStorage;
            }();
          }
        }
    };

    var menuQueue = [],
        menuIdQueue = {};
    p.c.menu.pxMenuManager = {
        schedule: function(id, metadata) {
            menuQueue.push({
                id: id,
                metadata: metadata
            });
        },
        getNext: function() {
            return menuQueue.shift();
        },
        getMenuIds: function() {
            return menuIdQueue;
        },
        queueLength: function() {
            return menuQueue.length;
        },
        renderMenus: function() {
            pega.ui.statetracking.setBusy("renderMenus"); // inform test tools and time tracker menus busy - big help to UIRegression portal tests
            var length = p.c.menu.pxMenuManager.queueLength();
            var menuObj;
            for (var i = 0; i < length; i++) {
                menuObj = p.c.menu.pxMenuManager.getNext();
                p.c.menu.createMenu(menuObj.id, menuObj.metadata);
            }
            pega.ui.statetracking.setDone();

        },
        maintainState: function() {
            return p.c.menu.maintainState();
        },
        clearState: function() {
            return p.c.menu.clearState();
        }
    };
  
    if (p.u.d.ServerProxy && p.u.d.ServerProxy.isDestinationLocal && p.u.d.ServerProxy.isDestinationLocal()) {
      $(p.c.menu.bindEvents);
    } else {
      p.c.menu.bindEvents();
    }

    if (p && p.ui && p.ui.template && p.ui.template.RenderingEngine) {
        p.ui.template.RenderingEngine.register("pxMenu", p.c.menu.renderer);
    }
    p.c.menu.createStorage({"name":"menuState", "expiryMS":(60*60*1000)});
    pega.u.d.attachOnload(p.c.menu.pxMenuManager.maintainState, true);
    
})(pega);
//static-content-hash-trigger-NON
(function(){var t=Handlebars.template;(Handlebars.templates=Handlebars.templates||{}).pzPega_menubar_template=t(function(k,e,l,q,m){function r(b,a){return""}function t(b,a){return'\n\x3cli class\x3d"menu-item-separator" role\x3d"separator"\x3e\x26nbsp;\x3c/li\x3e\n'}function w(b,a){var d,c,f,g;d=""+("\n\x3cli "+p((f=l.getActiveWhenNav||b&&b.getActiveWhenNav,g={hash:{},data:a},f?f.call(b,b&&b.metadata,b&&b.isParentActiveIndex,null==a||!1===a?a:a.index,g):n.call(b,"getActiveWhenNav",b&&b.metadata,b&&
b.isParentActiveIndex,null==a||!1===a?a:a.index,g)))+' class\x3d"menu-item ');if((c=l["if"].call(b,b&&b.pyDisabled,{hash:{},inverse:h.program(13,x,a),fn:h.program(11,y,a),data:a}))||0===c)d+=c;d+='" role\x3d"presentation" ';if((c=l["if"].call(b,b&&b.pyAutomationID,{hash:{},inverse:h.noop,fn:h.program(15,z,a),data:a}))||0===c)d+=c;d+=" ";if((c=l["if"].call(b,b&&b.pyDisabled,{hash:{},inverse:h.noop,fn:h.program(17,A,a),data:a}))||0===c)d+=c;d+=" "+p((f=l.printAttributeIfNotEmpty||b&&b.printAttributeIfNotEmpty,
g={hash:{},data:a},f?f.call(b,"isDeferLoad",b&&b.pyDeferLoad,g):n.call(b,"printAttributeIfNotEmpty","isDeferLoad",b&&b.pyDeferLoad,g)))+" "+p((f=l.printAttributeIfNotEmpty||b&&b.printAttributeIfNotEmpty,g={hash:{},data:a},f?f.call(b,"data-childnodesid",b&&b.pxEntryHandle,g):n.call(b,"printAttributeIfNotEmpty","data-childnodesid",b&&b.pxEntryHandle,g)))+" "+p((f=l.printAttributeIfNotEmptyWithPrefixAndSuffix||b&&b.printAttributeIfNotEmptyWithPrefixAndSuffix,g={hash:{},data:a},f?f.call(b,"id",b&&b.pxEntryHandle,
"menu-item-","",g):n.call(b,"printAttributeIfNotEmptyWithPrefixAndSuffix","id",b&&b.pxEntryHandle,"menu-item-","",g)))+" ";if((c=l["if"].call(b,b&&b.pyToolTip,{hash:{},inverse:h.noop,fn:h.program(19,B,a),data:a}))||0===c)d+=c;d+=" ";(f=l.pyExpressionIdMeta)?c=f.call(b,{hash:{},data:a}):(f=b&&b.pyExpressionIdMeta,c="function"===typeof f?f.call(b,{hash:{},data:a}):f);if(c||0===c)d+=c;d+=" \x3e\n";if((c=(f=l.appendProperty||b&&b.appendProperty,g={hash:{},inverse:h.noop,fn:h.program(3,r,a),data:a},f?
f.call(b,b,"isMenuBar",!0,g):n.call(b,"appendProperty",b,"isMenuBar",!0,g)))||0===c)d+=c;if((c=h.invokePartial(q.pzPega_menu_item_anchor_template,"pzPega_menu_item_anchor_template",b,l,q,a))||0===c)d+=c;if((c=l["if"].call(b,(c=b&&b.metadata,null==c||!1===c?c:c.sliding),{hash:{},inverse:h.noop,fn:h.program(21,C,a),data:a}))||0===c)d+=c;return d+"\n\x3c/li\x3e\n"}function y(b,a){return"menu-item-disabled"}function x(b,a){return"menu-item-enabled"}function z(b,a){var d;a='data-test-id\x3d"';if((d=(d=
b&&b.pyAutomationID,"function"===typeof d?d.apply(b):d))||0===d)a+=d;return a+'"'}function A(b,a){return'aria-disabled\x3d"true" disabled\x3d"disabled"'}function B(b,a){var d;a='title\x3d"';if((d=(d=b&&b.pyToolTip,"function"===typeof d?d.apply(b):d))||0===d)a+=d;return a+'"'}function C(b,a){var d="";if((b=h.invokePartial(q.pzPega_menu_template,"pzPega_menu_template",b,l,q,a))||0===b)d+=b;return d}function D(b,a){var d,c,f,g;d='\x3ca href\x3d"#" title\x3d"menu" onclick\x3d"pd(event);" class\x3d"menu-item-responsive-icon ';
if((c=(c=(c=b&&b.metadata,null==c||!1===c?c:c.format),"function"===typeof c?c.apply(b):c))||0===c)d+=c;d+='" data-ctl data-click\x3d\'[["showMenu",[{"dataSource":"'+p((c=(c=b&&b.metadata,null==c||!1===c?c:c.navName),"function"===typeof c?c.apply(b):c))+'", "isNavTypeCustom":"false", "menuAlign":"left","format":"'+p((c=(c=b&&b.metadata,null==c||!1===c?c:c.format),"function"===typeof c?c.apply(b):c))+'" , "loadBehavior":"firstuse", "ellipsisAfter":"999","usingPage":"", "navPage":"'+p((c=(c=b&&b.metadata,
null==c||!1===c?c:c.navPage),"function"===typeof c?c.apply(b):c))+'", "useNewMenu":"true", "isMobile":"'+p((c=(c=b&&b.metadata,null==c||!1===c?c:c.isMobile),"function"===typeof c?c.apply(b):c))+'"';if((c=(f=l.if_eq||b&&b.if_eq,g={hash:{},inverse:h.program(32,E,a),fn:h.program(27,F,a),data:a},f?f.call(b,(c=b&&b.metadata,null==c||!1===c?c:c.deferLoad),"true",g):n.call(b,"if_eq",(c=b&&b.metadata,null==c||!1===c?c:c.deferLoad),"true",g)))||0===c)d+=c;return d+', "removePage": "false"},":event"]]]\'\x3e\x3c/a\x3e'}
function F(b,a){var d,c;d=', "deferLoad" : true, "enableCache" :';if((c=l["if"].call(b,(c=b&&b.metadata,null==c||!1===c?c:c.enableCache),{hash:{},inverse:h.program(30,G,a),fn:h.program(28,H,a),data:a}))||0===c)d+=c;return d}function H(a,g){return"true"}function G(a,g){return"false"}function E(a,g){return', "deferLoad" : false'}this.compilerInfo=[4,"\x3e\x3d 1.0.0"];l=this.merge(l,k.helpers);q=this.merge(q,k.partials);m=m||{};k="";var a,u,v,h=this,n=l.helperMissing,p=this.escapeExpression;if((a=l["if"].call(e,
(a=e&&e.metadata,null==a||!1===a?a:a.sliding),{hash:{},inverse:h.noop,fn:h.program(1,function(a,g){var b;g='\x3cdiv class\x3d"menu-slider menu-slider-nofullscr ';if((b=(b=(b=a&&a.metadata,null==b||!1===b?b:b.format),"function"===typeof b?b.apply(a):b))||0===b)g+=b;return g+'"\x3e'},m),data:m}))||0===a)k+=a;k+='\x3cul class\x3d"';if((a=(a=(a=e&&e.metadata,null==a||!1===a?a:a.format),"function"===typeof a?a.apply(e):a))||0===a)k+=a;k+=" menu-bar menu-";if((a=(a=(a=e&&e.metadata,null==a||!1===a?a:a.type),
"function"===typeof a?a.apply(e):a))||0===a)k+=a;k+=" ";if((a=l["if"].call(e,(a=e&&e.metadata,null==a||!1===a?a:a.sliding),{hash:{},inverse:h.program(5,function(a,g){return"menu-bar-regular"},m),fn:h.program(3,r,m),data:m}))||0===a)k+=a;k+='" name\x3d"';if((a=(a=(a=e&&e.metadata,null==a||!1===a?a:a.navUID),"function"===typeof a?a.apply(e):a))||0===a)k+=a;k+='" role\x3d"menubar" id\x3d"';if((a=(a=(a=e&&e.metadata,null==a||!1===a?a:a.menuID),"function"===typeof a?a.apply(e):a))||0===a)k+=a;k+='" data-menu-id\x3d"'+
p((a=(a=e&&e.metadata,null==a||!1===a?a:a.uniqueMenuId),"function"===typeof a?a.apply(e):a))+'" \x3e';if((a=l.each.call(e,e&&e.nodes,{hash:{},inverse:h.noop,fn:h.programWithDepth(7,function(a,g,d){var b="",f,e,k;if((f=(e=l.appendProperty||a&&a.appendProperty,k={hash:{},inverse:h.noop,fn:h.program(3,r,g),data:g},e?e.call(a,a,"metadata",d&&d.metadata,k):n.call(a,"appendProperty",a,"metadata",d&&d.metadata,k)))||0===f)b+=f;b+="\n";if((f=(e=l.appendProperty||a&&a.appendProperty,k={hash:{},inverse:h.noop,
fn:h.program(3,r,g),data:g},e?e.call(a,a,"isParentActiveIndex",(f=d&&d.nodeParent,null==f||!1===f?f:f.isActiveIndex),k):n.call(a,"appendProperty",a,"isParentActiveIndex",(f=d&&d.nodeParent,null==f||!1===f?f:f.isActiveIndex),k)))||0===f)b+=f;b+="\n";if((f=(e=l.if_eq||a&&a.if_eq,k={hash:{},inverse:h.program(10,w,g),fn:h.program(8,t,g),data:g},e?e.call(a,a&&a.separator,"true",k):n.call(a,"if_eq",a&&a.separator,"true",k)))||0===f)b+=f;return b},m,e),data:m}))||0===a)k+=a;k+="\x3c/ul\x3e\n";if((a=l["if"].call(e,
(a=e&&e.metadata,null==a||!1===a?a:a.sliding),{hash:{},inverse:h.noop,fn:h.program(23,function(a,e){return"\x3c/div\x3e"},m),data:m}))||0===a)k+=a;if((a=(u=l.if_eq||e&&e.if_eq,v={hash:{},inverse:h.noop,fn:h.program(25,function(a,e){var b="",c,f,g;if((c=(f=l.if_eq||a&&a.if_eq,g={hash:{},inverse:h.noop,fn:h.program(26,D,e),data:e},f?f.call(a,(c=a&&a.metadata,null==c||!1===c?c:c.type),"horizontal",g):n.call(a,"if_eq",(c=a&&a.metadata,null==c||!1===c?c:c.type),"horizontal",g)))||0===c)b+=c;return b},
m),data:m},u?u.call(e,(a=e&&e.metadata,null==a||!1===a?a:a.media),!0,v):n.call(e,"if_eq",(a=e&&e.metadata,null==a||!1===a?a:a.media),!0,v)))||0===a)k+=a;return k})})();
(function(){var u=Handlebars.template;Handlebars.templates=Handlebars.templates||{};Handlebars.partials.pzPega_menu_template=u(function(p,r,h,n,t){function u(a,e){return'\x3cdiv class\x3d"menu-panel-wrapper"\x3e'}function q(a,e){return""}function w(a,e){return"menu-regular"}function x(a,e){var b;e='data-menuid\x3d"';if((b=(b=(b=a&&a.metadata,null==b||!1===b?b:b.menuID),"function"===typeof b?b.apply(a):b))||0===b)e+=b;return e+'"'}function y(a,e){var b;return m((b=(b=a&&a.metadata,null==b||!1===b?
b:b.idSuffix),"function"===typeof b?b.apply(a):b))}function z(a,e){var b,c;b=" ";if((c=h["if"].call(a,(c=a&&a.metadata,null==c||!1===c?c:c.fullscreen),{hash:{},inverse:g.program(21,A,e),fn:g.program(13,B,e),data:e}))||0===c)b+=c;return b+" "}function B(a,e){var b,c;b=' \x3cli class\x3d"menu-item menu-item-header" role\x3d"presentation"\x3e \x3ca href\x3d"#" onclick\x3d"pd(event);" class\x3d"menu-item-anchor menu-slide-back-anchor" tabindex\x3d"0" role\x3d"menuitem" data-ctl\x3d""\x3e \x3cspan class\x3d"menu-item-title-wrap"\x3e \x3cspan class\x3d"menu-item-title"\x3e ';
if((c=h["if"].call(a,(c=a&&a.metadata,null==c||!1===c?c:c.deferLoad),{hash:{},inverse:g.program(16,C,e),fn:g.program(14,D,e),data:e}))||0===c)b+=c;return b+' \x3c/span\x3e \x3c/span\x3e \x3cspan class\x3d"menu-full-close-icon"\x3e\x3c/span\x3e \x3c/a\x3e \x3c/li\x3e '}function D(a,e){var b;e=" ";if((b=(b=(b=a&&a.metadata,null==b||!1===b?b:b.headerText),"function"===typeof b?b.apply(a):b))||0===b)e+=b;return e+" "}function C(a,e){var b,c,d,f;b=" ";if((c=(d=h.if_not_eq||a&&a.if_not_eq,f={hash:{},inverse:g.program(19,
E,e),fn:g.program(17,v,e),data:e},d?d.call(a,(c=a&&a.metadata,null==c||!1===c?c:c.contextMenuFirstLevel),!0,f):l.call(a,"if_not_eq",(c=a&&a.metadata,null==c||!1===c?c:c.contextMenuFirstLevel),!0,f)))||0===c)b+=c;return b+" "}function v(a,e){var b;return(b=(b=a&&a.pyCaption,"function"===typeof b?b.apply(a):b))||0===b?b:""}function E(a,e){var b;return(b=(b=(b=a&&a.metadata,null==b||!1===b?b:b.headerText),"function"===typeof b?b.apply(a):b))||0===b?b:""}function A(a,e){var b,c,d,f;b=" ";if((c=(d=h.if_not_eq||
a&&a.if_not_eq,f={hash:{},inverse:g.noop,fn:g.program(22,F,e),data:e},d?d.call(a,(c=a&&a.metadata,null==c||!1===c?c:c.contextMenuFirstLevel),!0,f):l.call(a,"if_not_eq",(c=a&&a.metadata,null==c||!1===c?c:c.contextMenuFirstLevel),!0,f)))||0===c)b+=c;return b+" "}function F(a,e){var b,c;b=' \x3cli class\x3d"menu-item" role\x3d"presentation"\x3e \x3ca href\x3d"#" onclick\x3d"pd(event);" class\x3d"menu-item-anchor menu-slide-back-anchor" tabindex\x3d"0" role\x3d"menuitem" data-ctl\x3d""\x3e \x3cspan class\x3d"menu-item-title-wrap"\x3e \x3cspan class\x3d"menu-item-title"\x3e ';
if((c=h["if"].call(a,(c=a&&a.metadata,null==c||!1===c?c:c.parentHeader),{hash:{},inverse:g.program(17,v,e),fn:g.program(23,G,e),data:e}))||0===c)b+=c;return b+' \x3c/span\x3e \x3c/span\x3e \x3c/a\x3e \x3c/li\x3e \x3cli class\x3d"menu-item-separator" role\x3d"separator"\x3e\x26nbsp;\x3c/li\x3e '}function G(a,e){var b;return(b=(b=(b=a&&a.metadata,null==b||!1===b?b:b.parentHeader),"function"===typeof b?b.apply(a):b))||0===b?b:""}function H(a,e,b,c){var d="",f,k;if((b=(f=h.appendProperty||a&&a.appendProperty,
k={hash:{},inverse:g.noop,fn:g.program(4,q,e),data:e},f?f.call(a,a,"metadata",b&&b.metadata,k):l.call(a,"appendProperty",a,"metadata",b&&b.metadata,k)))||0===b)d+=b;d+=" ";if((b=(f=h.appendProperty||a&&a.appendProperty,k={hash:{},inverse:g.noop,fn:g.program(4,q,e),data:e},f?f.call(a,a,"nestedActiveIndex",c&&c.isActiveIndex,k):l.call(a,"appendProperty",a,"nestedActiveIndex",c&&c.isActiveIndex,k)))||0===b)d+=b;d+=" ";if((b=(f=h.if_eq||a&&a.if_eq,k={hash:{},inverse:g.program(28,I,e),fn:g.program(26,
J,e),data:e},f?f.call(a,a&&a.separator,"true",k):l.call(a,"if_eq",a&&a.separator,"true",k)))||0===b)d+=b;return d}function J(a,e){return' \x3cli class\x3d"menu-item-separator" role\x3d"separator"\x3e\x26nbsp;\x3c/li\x3e '}function I(a,e){var b,c,d,f;b=" \x3cli ";if((c=(c=a&&a.pyExpressionIdMeta,"function"===typeof c?c.apply(a):c))||0===c)b+=c;b+=" "+m((d=h.getActiveWhenNav||a&&a.getActiveWhenNav,f={hash:{},data:e},d?d.call(a,a&&a.metadata,a&&a.nestedActiveIndex,null==e||!1===e?e:e.index,f):l.call(a,
"getActiveWhenNav",a&&a.metadata,a&&a.nestedActiveIndex,null==e||!1===e?e:e.index,f)))+' class\x3d"menu-item ';if((c=h["if"].call(a,a&&a.pyDisabled,{hash:{},inverse:g.program(31,K,e),fn:g.program(29,L,e),data:e}))||0===c)b+=c;b+='" role\x3d"presentation" ';if((c=h["if"].call(a,a&&a.pyAutomationID,{hash:{},inverse:g.noop,fn:g.program(33,M,e),data:e}))||0===c)b+=c;b+=" ";if((c=h["if"].call(a,a&&a.pyDisabled,{hash:{},inverse:g.noop,fn:g.program(35,N,e),data:e}))||0===c)b+=c;b+=" "+m((d=h.printAttributeIfNotEmptyWithPrefixAndSuffix||
a&&a.printAttributeIfNotEmptyWithPrefixAndSuffix,f={hash:{},data:e},d?d.call(a,"isDeferLoad",a&&a.pyDeferLoad,"","",f):l.call(a,"printAttributeIfNotEmptyWithPrefixAndSuffix","isDeferLoad",a&&a.pyDeferLoad,"","",f)))+" "+m((d=h.printAttributeIfNotEmptyWithPrefixAndSuffix||a&&a.printAttributeIfNotEmptyWithPrefixAndSuffix,f={hash:{},data:e},d?d.call(a,"data-childnodesid",a&&a.pxEntryHandle,"",(c=a&&a.metadata,null==c||!1===c?c:c.idSuffix),f):l.call(a,"printAttributeIfNotEmptyWithPrefixAndSuffix","data-childnodesid",
a&&a.pxEntryHandle,"",(c=a&&a.metadata,null==c||!1===c?c:c.idSuffix),f)))+" "+m((d=h.printAttributeIfNotEmptyWithPrefixAndSuffix||a&&a.printAttributeIfNotEmptyWithPrefixAndSuffix,f={hash:{},data:e},d?d.call(a,"id",a&&a.pxEntryHandle,"menu-item-",(c=a&&a.metadata,null==c||!1===c?c:c.idSuffix),f):l.call(a,"printAttributeIfNotEmptyWithPrefixAndSuffix","id",a&&a.pxEntryHandle,"menu-item-",(c=a&&a.metadata,null==c||!1===c?c:c.idSuffix),f)))+" ";if((c=h["if"].call(a,a&&a.pyToolTip,{hash:{},inverse:g.noop,
fn:g.program(37,O,e),data:e}))||0===c)b+=c;b+="\x3e ";if((c=(d=h.appendProperty||a&&a.appendProperty,f={hash:{},inverse:g.noop,fn:g.program(4,q,e),data:e},d?d.call(a,a,"isMenuBar",!1,f):l.call(a,"appendProperty",a,"isMenuBar",!1,f)))||0===c)b+=c;if((c=g.invokePartial(n.pzPega_menu_item_anchor_template,"pzPega_menu_item_anchor_template",a,h,n,e))||0===c)b+=c;if((c=h["if"].call(a,a&&a.nodes,{hash:{},inverse:g.noop,fn:g.program(39,P,e),data:e}))||0===c)b+=c;return b+"\x3c/li\x3e "}function L(a,e){return"menu-item-disabled"}
function K(a,e){return"menu-item-enabled"}function M(a,e){var b;e='data-test-id\x3d"';if((b=(b=a&&a.pyAutomationID,"function"===typeof b?b.apply(a):b))||0===b)e+=b;return e+'"'}function N(a,e){return'aria-disabled\x3d"true" disabled\x3d"disabled"'}function O(a,e){var b;e='title\x3d"';if((b=(b=a&&a.pyToolTip,"function"===typeof b?b.apply(a):b))||0===b)e+=b;return e+'"'}function P(a,e){var b="";if((a=g.invokePartial(n.pzPega_menu_template,"pzPega_menu_template",a,h,n,e))||0===a)b+=a;return b}function Q(a,
e){return"\x3c/div\x3e"}this.compilerInfo=[4,"\x3e\x3d 1.0.0"];h=this.merge(h,p.helpers);n=this.merge(n,p.partials);t=t||{};var m=this.escapeExpression,g=this,l=h.helperMissing;return(p=h["if"].call(r,r&&r.nodes,{hash:{},inverse:g.noop,fn:g.programWithDepth(1,function(a,e,b){var c="",d,f,k;if((d=(f=h.if_not_eq||a&&a.if_not_eq,k={hash:{},inverse:g.noop,fn:g.program(2,u,e),data:e},f?f.call(a,(d=a&&a.metadata,null==d||!1===d?d:d.sliding),!0,k):l.call(a,"if_not_eq",(d=a&&a.metadata,null==d||!1===d?d:
d.sliding),!0,k)))||0===d)c+=d;c+=' \x3cul class\x3d"menu ';if((d=(d=(d=a&&a.metadata,null==d||!1===d?d:d.format),"function"===typeof d?d.apply(a):d))||0===d)c+=d;c+=" ";if((d=h["if"].call(a,(d=a&&a.metadata,null==d||!1===d?d:d.sliding),{hash:{},inverse:g.program(6,w,e),fn:g.program(4,q,e),data:e}))||0===d)c+=d;c+='" ';if((d=h["if"].call(a,(d=a&&a.metadata,null==d||!1===d?d:d.menuID),{hash:{},inverse:g.noop,fn:g.program(8,x,e),data:e}))||0===d)c+=d;c+=' role\x3d"menu" id\x3d"';(f=h.pxEntryHandle)?
d=f.call(a,{hash:{},data:e}):(f=a&&a.pxEntryHandle,d="function"===typeof f?f.call(a,{hash:{},data:e}):f);c+=m(d);if((d=(f=h.if_not_eq||a&&a.if_not_eq,k={hash:{},inverse:g.noop,fn:g.program(10,y,e),data:e},f?f.call(a,(d=a&&a.metadata,null==d||!1===d?d:d.contextMenuFirstLevel),!0,k):l.call(a,"if_not_eq",(d=a&&a.metadata,null==d||!1===d?d:d.contextMenuFirstLevel),!0,k)))||0===d)c+=d;c+='" data-menu-id\x3d"'+m((d=(d=a&&a.metadata,null==d||!1===d?d:d.uniqueMenuId),"function"===typeof d?d.apply(a):d))+
"-"+m((f=h.getMenuDepth||a&&a.getMenuDepth,k={hash:{},data:e},f?f.call(a,a&&a.pxEntryHandle,k):l.call(a,"getMenuDepth",a&&a.pxEntryHandle,k)))+'"\x3e ';if((d=h["if"].call(a,(d=a&&a.metadata,null==d||!1===d?d:d.sliding),{hash:{},inverse:g.noop,fn:g.program(12,z,e),data:e}))||0===d)c+=d;c+=" ";if((d=(f=h.appendProperty||a&&a.appendProperty,k={hash:{},inverse:g.noop,fn:g.program(4,q,e),data:e},f?f.call(a,a&&a.metadata,"contextMenuFirstLevel",!1,k):l.call(a,"appendProperty",a&&a.metadata,"contextMenuFirstLevel",
!1,k)))||0===d)c+=d;if((d=h.each.call(a,a&&a.nodes,{hash:{},inverse:g.noop,fn:g.programWithDepth(25,H,e,a,b),data:e}))||0===d)c+=d;c+="\x3c/ul\x3e ";if((d=(f=h.if_not_eq||a&&a.if_not_eq,k={hash:{},inverse:g.noop,fn:g.program(41,Q,e),data:e},f?f.call(a,(d=a&&a.metadata,null==d||!1===d?d:d.sliding),!0,k):l.call(a,"if_not_eq",(d=a&&a.metadata,null==d||!1===d?d:d.sliding),!0,k)))||0===d)c+=d;return c},t,r),data:t}))||0===p?p:""})})();
(function(){var r=Handlebars.template;Handlebars.templates=Handlebars.templates||{};Handlebars.partials.pzPega_menu_item_anchor_template=r(function(k,c,g,m,f){function r(a,h){return"menuitemradio "}function v(a,h){return"menuitemcheckbox "}function w(a,h){return""}function t(a,h){return(a=g["if"].call(a,a&&a["data-click"],{hash:{},inverse:e.noop,fn:e.program(18,x,h),data:h}))||0===a?a:""}function x(a,h){var b,d;return""+('data-ctl data-click\x3d"'+q((b=g.JSONToStringInMenu||a&&a.JSONToStringInMenu,
d={hash:{},data:h},b?b.call(a,a&&a["data-click"],!0,d):l.call(a,"JSONToStringInMenu",a&&a["data-click"],!0,d)))+'"')}function y(a,h){return'aria-checked\x3d"false"'}function z(a,h){return" menu-item-icon-radio "}function A(a,h){return" menu-item-icon-check "}function B(a,h){var b;b='\x3cspan class\x3d"menu-item-icon ';if((a=g["if"].call(a,a&&a.pyRadio,{hash:{},inverse:e.program(36,C,h),fn:e.program(34,D,h),data:h}))||0===a)b+=a;return b+'" data-click\x3d"."\x3e\x3c/span\x3e'}function D(a,b){return"menu-item-icon-radio-blank"}
function C(a,b){return"menu-item-icon-check-blank"}function u(a,b){var h,d;h='\x3cspan class\x3d"menu-item-title" data-click\x3d".."\x3e';(d=g.pyCaption)?a=d.call(a,{hash:{},data:b}):(d=a&&a.pyCaption,a="function"===typeof d?d.call(a,{hash:{},data:b}):d);return h+=q(a)+"\x3c/span\x3e"}function E(a,b){var h,d,c,e;h='\x3cspan class\x3d"menu-item-title" data-click\x3d".."\x3e';if((d=(c=g.addEllipsis||a&&a.addEllipsis,e={hash:{},data:b},c?c.call(a,a&&a.pyCaption,(d=a&&a.metadata,null==d||!1===d?d:d.maxWidth),
e):l.call(a,"addEllipsis",a&&a.pyCaption,(d=a&&a.metadata,null==d||!1===d?d:d.maxWidth),e)))||0===d)h+=d;return h+"\x3c/span\x3e"}this.compilerInfo=[4,"\x3e\x3d 1.0.0"];g=this.merge(g,k.helpers);m=this.merge(m,k.partials);f=f||{};var b,n,p,e=this,l=g.helperMissing,q=this.escapeExpression;k='\x3ca href\x3d"#" onclick\x3d"pd(event);" class\x3d"menu-item-anchor ';if((b=g["if"].call(c,c&&c.pyDisabled,{hash:{},inverse:e.noop,fn:e.program(1,function(a,b){return"menu-item-anchor-disabled"},f),data:f}))||
0===b)k+=b;if((b=g["if"].call(c,c&&c.pxEntryHandle,{hash:{},inverse:e.noop,fn:e.program(3,function(a,b){return"menu-item-expand"},f),data:f}))||0===b)k+=b;k+='" ';if((b=g["if"].call(c,c&&c.focusable,{hash:{},inverse:e.program(7,function(a,b){return'tabindex\x3d"-1" '},f),fn:e.program(5,function(a,b){return'tabindex\x3d"0"'},f),data:f}))||0===b)k+=b;k+=' role\x3d"';if((b=g["if"].call(c,c&&c.pyChecked,{hash:{},inverse:e.noop,fn:e.program(9,function(a,b){return(a=g["if"].call(a,a&&a.pyRadio,{hash:{},
inverse:e.program(12,v,b),fn:e.program(10,r,b),data:b}))||0===a?a:""},f),data:f}))||0===b)k+=b;k+='menuitem" ';if((b=g["if"].call(c,(b=c&&c.metadata,null==b||!1===b?b:b.touchable),{hash:{},inverse:e.program(17,t,f),fn:e.program(14,function(a,b){return(a=g["if"].call(a,a&&a.pxEntryHandle,{hash:{},inverse:e.program(17,t,b),fn:e.program(15,w,b),data:b}))||0===a?a:""},f),data:f}))||0===b)k+=b;if((b=g["if"].call(c,c&&c.pxEntryHandle,{hash:{},inverse:e.noop,fn:e.program(20,function(a,b){return'aria-haspopup\x3d"true"'},
f),data:f}))||0===b)k+=b;if((b=(n=g.if_eq||c&&c.if_eq,p={hash:{},inverse:e.program(24,function(a,b){var c,d;return(a=(c=g.if_eq||a&&a.if_eq,d={hash:{},inverse:e.noop,fn:e.program(25,y,b),data:b},c?c.call(a,a&&a.pyChecked,"false",d):l.call(a,"if_eq",a&&a.pyChecked,"false",d)))||0===a?a:""},f),fn:e.program(22,function(a,b){return'aria-checked\x3d"true"'},f),data:f},n?n.call(c,c&&c.pyChecked,"true",p):l.call(c,"if_eq",c&&c.pyChecked,"true",p)))||0===b)k+=b;k+="\x3e";if((b=(n=g.if_eq||c&&c.if_eq,p={hash:{},
inverse:e.program(32,function(a,b){var c="",d,h;if((a=(d=g.if_eq||a&&a.if_eq,h={hash:{},inverse:e.noop,fn:e.program(33,B,b),data:b},d?d.call(a,a&&a.pyChecked,"false",h):l.call(a,"if_eq",a&&a.pyChecked,"false",h)))||0===a)c+=a;return c},f),fn:e.program(27,function(a,b){var c;c='\x3cspan class\x3d"menu-item-icon ';if((a=g["if"].call(a,a&&a.pyRadio,{hash:{},inverse:e.program(30,A,b),fn:e.program(28,z,b),data:b}))||0===a)c+=a;return c+'" data-click\x3d"."\x3e\x3c/span\x3e'},f),data:f},n?n.call(c,c&&c.pyChecked,
"true",p):l.call(c,"if_eq",c&&c.pyChecked,"true",p)))||0===b)k+=b;if((b=e.invokePartial(m.pzPega_menu_item_icon_template,"pzPega_menu_item_icon_template",c,g,m,f))||0===b)k+=b;k+='\x3cspan class\x3d"menu-item-title-wrap" data-click\x3d"."\x3e';if((b=g["if"].call(c,(b=c&&c.metadata,null==b||!1===b?b:b.maxWidth),{hash:{},inverse:e.program(39,u,f),fn:e.program(38,function(a,b){var c="",d,f,h;if((d=(f=g.if_eq||a&&a.if_eq,h={hash:{},inverse:e.program(41,E,b),fn:e.program(39,u,b),data:b},f?f.call(a,(d=
a&&a.metadata,null==d||!1===d?d:d.maxWidth),"999",h):l.call(a,"if_eq",(d=a&&a.metadata,null==d||!1===d?d:d.maxWidth),"999",h)))||0===d)c+=d;return c},f),data:f}))||0===b)k+=b;if((b=g["if"].call(c,c&&c.pyBadgeProperty,{hash:{},inverse:e.noop,fn:e.program(43,function(a,b){var c,d;c='\x3cspan class\x3d"menu-item-badge ';if((d=(d=a&&a.badgeClass,"function"===typeof d?d.apply(a):d))||0===d)c+=d;c+='" data-click\x3d".."\x3e';(d=g.pyBadgeProperty)?d=d.call(a,{hash:{},data:b}):(d=a&&a.pyBadgeProperty,d="function"===
typeof d?d.call(a,{hash:{},data:b}):d);return c+=q(d)+"\x3c/span\x3e"},f),data:f}))||0===b)k+=b;if((b=g["if"].call(c,c&&c.pySummary,{hash:{},inverse:e.noop,fn:e.program(45,function(a,b){var c,d;c='\x3cspan class\x3d"menu-item-description" data-click\x3d".."\x3e';(d=g.pySummary)?a=d.call(a,{hash:{},data:b}):(d=a&&a.pySummary,a="function"===typeof d?d.call(a,{hash:{},data:b}):d);return c+=q(a)+"\x3c/span\x3e"},f),data:f}))||0===b)k+=b;k+="\x3c/span\x3e";if((b=e.invokePartial(m.pzPega_menu_item_icon_template,
"pzPega_menu_item_icon_template",c,g,m,f))||0===b)k+=b;return k+"\x3c/a\x3e"})})();
(function(){var p=Handlebars.template;Handlebars.templates=Handlebars.templates||{};Handlebars.partials.pzPega_menu_item_icon_template=p(function(k,m,e,p,l){function r(a,c){var d,b;d='\x3cspan role\x3d"presentation" class\x3d"menu-item-icon-imageclass ';(b=e.pyIconStyle)?a=b.call(a,{hash:{},data:c}):(b=a&&a.pyIconStyle,a="function"===typeof b?b.call(a,{hash:{},data:c}):b);if(a||0===a)d+=a;return d+'" data-click\x3d".."\x3e\x3c/span\x3e'}function t(a,c){var d,b;d='\x3cimg role\x3d"presentation" class\x3d"menu-item-icon-image" src\x3d"';
(b=e.pySimpleImage)?a=b.call(a,{hash:{},data:c}):(b=a&&a.pySimpleImage,a="function"===typeof b?b.call(a,{hash:{},data:c}):b);return d+=q(a)+'" align\x3d"absmiddle"  data-click\x3d".." /\x3e'}function u(a,c){var d,b;d='\x3cimg role\x3d"presentation" class\x3d"menu-item-icon-image" src\x3d"';(b=e.pyIconProperty)?a=b.call(a,{hash:{},data:c}):(b=a&&a.pyIconProperty,a="function"===typeof b?b.call(a,{hash:{},data:c}):b);return d+=q(a)+'" align\x3d"absmiddle"  data-click\x3d".." /\x3e'}this.compilerInfo=
[4,"\x3e\x3d 1.0.0"];e=this.merge(e,k.helpers);l=l||{};var q=this.escapeExpression,h=this,n=e.helperMissing;return(k=e["if"].call(m,m&&m.pyImageSource,{hash:{},inverse:h.noop,fn:h.program(1,function(a,c){var d,b,f,g;d='\x3cspan class\x3d"menu-item-image-wrapper" data-click\x3d"."\x3e';if((b=(f=e.if_eq||a&&a.if_eq,g={hash:{},inverse:h.noop,fn:h.program(2,r,c),data:c},f?f.call(a,a&&a.pyImageSource,"styleclass",g):n.call(a,"if_eq",a&&a.pyImageSource,"styleclass",g)))||0===b)d+=b;if((b=(f=e.if_eq||a&&
a.if_eq,g={hash:{},inverse:h.noop,fn:h.program(4,t,c),data:c},f?f.call(a,a&&a.pyImageSource,"image",g):n.call(a,"if_eq",a&&a.pyImageSource,"image",g)))||0===b)d+=b;if((b=(f=e.if_eq||a&&a.if_eq,g={hash:{},inverse:h.noop,fn:h.program(6,u,c),data:c},f?f.call(a,a&&a.pyImageSource,"property",g):n.call(a,"if_eq",a&&a.pyImageSource,"property",g)))||0===b)d+=b;return d+"\x3c/span\x3e"},l),data:l}))||0===k?k:""})})();